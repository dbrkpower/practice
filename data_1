{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bike Sharing Demand\n",
    "\n",
    "## 데이터분석과 시각화, 머신러닝 알고리즘으로 시간당 자전거 대여량을 예측하기\n",
    "\n",
    "(이 쥬피터 노트북은 다음의 링크 https://bit.ly/ds-bike-0401 에서 다운받을 수 있습니다.)\n",
    "\n",
    "이번 캐글 경진대회는 시간당 자전거 대여량을 예측하는 [Bike Sharing Demand](https://www.kaggle.com/c/bike-sharing-demand) 입니다. 워싱턴 D.C 소재의 자전거 대여 스타트업 [Capital Bikeshare](https://www.capitalbikeshare.com/)의 데이터를 활용하여, 특정 시간대에 얼마나 많은 사람들이 자전거를 대여하는지 예측하는 것이 목표입니다.\n",
    "\n",
    "사람들이 자전거를 대여하는데는 많은 요소가 관여되어 있을 겁니다. 가령 시간(새벽보다 낮에 많이 빌리겠죠), 날씨(비가 오면 자전거를 대여하지 않을 겁니다), 근무일(근무 시간에는 자전거를 대여하지 않겠죠) 등. 이런 모든 요소를 조합하여 워싱턴 D.C의 자전거 교통량을 예측해주세요. 이번 경진대회에서는 기존까지 배웠던 프로그래밍 언어와 인공지능&머신러닝 능력 외에도, 자전거 렌탈 시장에 대한 약간의 전문지식, 그리고 일반인의 기초 상식을 총동원 할 수 있습니다.\n",
    "\n",
    "저번 [Titanic: Machine Learning from Disaster](https://www.kaggle.com/c/titanic/) 경진대회와 마찬가지로, 이번에도 프로그래밍 언어 파이썬([Python](https://www.python.org/)), 데이터 분석 패키지 판다스([Pandas](https://pandas.pydata.org/)), 그리고 머신러닝&인공지능 라이브러리인 싸이킷런([scikit-learn](scikit-learn.org))을 사용합니다. 여기에 더불어, 이번에는 데이터 시각화 패키지 [matplotlib](https://matplotlib.org/)와 [Seaborn](https://seaborn.pydata.org/)을 본격적으로 활용해볼 것입니다.\n",
    "\n",
    "## 컬럼 설명\n",
    "\n",
    "(데이터는 [다음의 링크](https://www.kaggle.com/c/bike-sharing-demand/data)에서 다운받으실 수 있습니다)\n",
    "\n",
    "  * **datetime** - 시간. 연-월-일 시:분:초 로 표현합니다. (가령 2011-01-01 00:00:00은 2011년 1월 1일 0시 0분 0초)\n",
    "  * **season** - 계절. 봄(1), 여름(2), 가을(3), 겨울(4) 순으로 표현합니다.\n",
    "  * **holiday** - 공휴일. 1이면 공휴일이며, 0이면 공휴일이 아닙니다.\n",
    "  * **workingday** - 근무일. 1이면 근무일이며, 0이면 근무일이 아닙니다.\n",
    "  * **weather** - 날씨. 1 ~ 4 사이의 값을 가지며, 구체적으로는 다음과 같습니다.\n",
    "    * 1: 아주 깨끗한 날씨입니다. 또는 아주 약간의 구름이 끼어있습니다.\n",
    "    * 2: 약간의 안개와 구름이 끼어있는 날씨입니다.\n",
    "    * 3: 약간의 눈, 비가 오거나 천둥이 칩니다.\n",
    "    * 4: 아주 많은 비가 오거나 우박이 내립니다.\n",
    "  * **temp** - 온도. 섭씨(Celsius)로 적혀있습니다.\n",
    "  * **atemp** - 체감 온도. 마찬가지로 섭씨(Celsius)로 적혀있습니다.\n",
    "  * **humidity** - 습도.\n",
    "  * **windspeed** - 풍속.\n",
    "  * **casual** - 비회원(non-registered)의 자전거 대여량.\n",
    "  * **registered** - 회원(registered)의 자전거 대여량.\n",
    "  * **count** - 총 자전거 대여랑. 비회원(casual) + 회원(registered)과 동일합니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 파이썬의 데이터 분석 패키지 Pandas(pandas.pydata.org) 를 읽어옵니다.\n",
    "# Pandas는 쉽게 말해 파이썬으로 엑셀을 다룰 수 있는 툴이라고 보시면 됩니다.\n",
    "# 이 패키지를 앞으로는 pd라는 축약어로 사용하겠습니다.\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load Dataset\n",
    "\n",
    "언제나처럼 모든 데이터 분석의 시작은 주어진 데이터를 읽어오는 것입니다. [판다스(Pandas)](https://pandas.pydata.org/)의 [read_csv](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html)를 활용하여 [Bike Sharing Demand](https://www.kaggle.com/c/bike-sharing-demand) 경진대회에서 제공하는 두 개의 데이터(train, test)를 읽어오겠습니다. ([다운로드 링크](https://www.kaggle.com/c/bike-sharing-demand/data))\n",
    "\n",
    "앞서 [Titanic: Machine Learning from Disaster](https://www.kaggle.com/c/titanic/) 경진대회와 마찬가지로, 여기에서도 파일의 경로를 지정하는 방법에 주의하셔야 합니다. 만일 read_csv를 실행할 때 (**FileNotFoundError**)라는 이름의 에러가 난다면 경로가 제대로 지정이 되지 않은 것입니다. **파일의 경로를 지정하는 법이 생각나지 않는다면 [다음의 링크](http://88240.tistory.com/122)를 통해 경로를 지정하는 법을 복습한 뒤 다시 시도해주세요.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10886, 12)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>datetime</th>\n",
       "      <th>season</th>\n",
       "      <th>holiday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weather</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>humidity</th>\n",
       "      <th>windspeed</th>\n",
       "      <th>casual</th>\n",
       "      <th>registered</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-01-01 00:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>81</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011-01-01 01:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.02</td>\n",
       "      <td>13.635</td>\n",
       "      <td>80</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8</td>\n",
       "      <td>32</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-01-01 02:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.02</td>\n",
       "      <td>13.635</td>\n",
       "      <td>80</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5</td>\n",
       "      <td>27</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-01-01 03:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>75</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-01-01 04:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>75</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              datetime  season  holiday  workingday  weather  temp   atemp  \\\n",
       "0  2011-01-01 00:00:00       1        0           0        1  9.84  14.395   \n",
       "1  2011-01-01 01:00:00       1        0           0        1  9.02  13.635   \n",
       "2  2011-01-01 02:00:00       1        0           0        1  9.02  13.635   \n",
       "3  2011-01-01 03:00:00       1        0           0        1  9.84  14.395   \n",
       "4  2011-01-01 04:00:00       1        0           0        1  9.84  14.395   \n",
       "\n",
       "   humidity  windspeed  casual  registered  count  \n",
       "0        81        0.0       3          13     16  \n",
       "1        80        0.0       8          32     40  \n",
       "2        80        0.0       5          27     32  \n",
       "3        75        0.0       3          10     13  \n",
       "4        75        0.0       0           1      1  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 판다스의 read_csv로 train.csv 파일을 읽어옵니다.\n",
    "# 여기서 datetime은 특별히 날짜로 해석하기 위해 parse_dates 옵션에 넣어줍니다.\n",
    "# 읽어온 데이터를 train이라는 이름의 변수에 할당합니다.\n",
    "train = pd.read_csv(\"C:\\\\Users\\\\user\\\\Desktop\\\\Python\\\\DS_school\\\\8_week\\\\1. data\\\\train.csv\")\n",
    "\n",
    "# train 변수에 할당된 데이터의 행렬 사이즈를 출력합니다.\n",
    "# 출력은 (row, column) 으로 표시됩니다.\n",
    "print(train.shape)\n",
    "\n",
    "# head()로 train 데이터의 상위 5개를 띄웁니다.\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(6493, 9)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>datetime</th>\n",
       "      <th>season</th>\n",
       "      <th>holiday</th>\n",
       "      <th>workingday</th>\n",
       "      <th>weather</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>humidity</th>\n",
       "      <th>windspeed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-01-20 00:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10.66</td>\n",
       "      <td>11.365</td>\n",
       "      <td>56</td>\n",
       "      <td>26.0027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011-01-20 01:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10.66</td>\n",
       "      <td>13.635</td>\n",
       "      <td>56</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-01-20 02:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10.66</td>\n",
       "      <td>13.635</td>\n",
       "      <td>56</td>\n",
       "      <td>0.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-01-20 03:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10.66</td>\n",
       "      <td>12.880</td>\n",
       "      <td>56</td>\n",
       "      <td>11.0014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-01-20 04:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10.66</td>\n",
       "      <td>12.880</td>\n",
       "      <td>56</td>\n",
       "      <td>11.0014</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              datetime  season  holiday  workingday  weather   temp   atemp  \\\n",
       "0  2011-01-20 00:00:00       1        0           1        1  10.66  11.365   \n",
       "1  2011-01-20 01:00:00       1        0           1        1  10.66  13.635   \n",
       "2  2011-01-20 02:00:00       1        0           1        1  10.66  13.635   \n",
       "3  2011-01-20 03:00:00       1        0           1        1  10.66  12.880   \n",
       "4  2011-01-20 04:00:00       1        0           1        1  10.66  12.880   \n",
       "\n",
       "   humidity  windspeed  \n",
       "0        56    26.0027  \n",
       "1        56     0.0000  \n",
       "2        56     0.0000  \n",
       "3        56    11.0014  \n",
       "4        56    11.0014  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# train.csv 파일을 읽어온 방식과 동일하게 test.csv를 읽어옵니다.\n",
    "# 이후 이 데이터를 test라는 이름의 변수에 저장합니다.\n",
    "test = pd.read_csv(\"C:\\\\Users\\\\user\\\\Desktop\\\\Python\\\\DS_school\\\\8_week\\\\1. data\\\\test.csv\")\n",
    "\n",
    "# 마찬가지로 행렬(row, column) 사이즈를 출력하고\n",
    "print(test.shape)\n",
    "\n",
    "# 전체 test 데이터에서 상위 5개만 출력합니다.\n",
    "test.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Preprocessing\n",
    "\n",
    "데이터를 읽어왔으면, 이 데이터를 편하게 분석하고 머신러닝 알고리즘에 집어넣기 위해 간단한 전처리(Preprocessing) 작업을 진행하겠습니다.\n",
    "\n",
    "[Bike Sharing Demand](https://www.kaggle.com/c/bike-sharing-demand)는 편리하게도 대부분의 데이터가 전처리 되어있습니다. (가령 season 컬럼은 봄을 spring이라 표현하지 않고 1이라고 표현합니다) 그러므로 [Titanic: Machine Learning from Disaster](https://www.kaggle.com/c/titanic/) 경진대회와는 달리 간단한 전처리만 끝내면 바로 머신러닝 모델에 데이터를 집어넣을 수 있습니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Parse datetime\n",
    "\n",
    "먼저 **날짜(datetime)** 컬럼을 전처리 하겠습니다.\n",
    "\n",
    "날짜 컬럼은 얼핏 보면 여러개의 숫자로 구성되어 있습니다. (ex: 2011-01-01 00:00:00) 하지만 결론적으로 숫자는 아니며, 판다스에서는 문자열(object) 또는 날짜(datetime64)로 인식합니다. (값에 하이픈(-)과 콜론(:)이 있기 때문입니다) 그러므로 날짜(datetime) 컬럼을 사용하기 위해서는 머신러닝 알고리즘이 이해할 수 있는 방식으로 전처리를 해줘야 합니다.\n",
    "\n",
    "날짜(datetime) 컬럼을 전처리하는 가장 쉬운 방법은 연, 월, 일, 시, 분, 초를 따로 나누는 것입니다. 가령 2011-01-01 00:00:00은 2011년 1월 1일 0시 0분 0초라고 볼 수 있으므로, 2011, 1, 1, 0, 0, 0으로 따로 나누면 총 6개의 숫자가 됩니다. 즉, **날짜(datetime) 컬럼을 여섯개의 다른 컬럼으로 나누어주는 것이 날짜 컬럼을 전처리하는 핵심입니다**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10886, 19)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>datetime</th>\n",
       "      <th>datetime-year</th>\n",
       "      <th>datetime-month</th>\n",
       "      <th>datetime-day</th>\n",
       "      <th>datetime-hour</th>\n",
       "      <th>datetime-minute</th>\n",
       "      <th>datetime-second</th>\n",
       "      <th>datetime-dayofweek</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-01-01 00:00:00</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011-01-01 01:00:00</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-01-01 02:00:00</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-01-01 03:00:00</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-01-01 04:00:00</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             datetime  datetime-year  datetime-month  datetime-day  \\\n",
       "0 2011-01-01 00:00:00           2011               1             1   \n",
       "1 2011-01-01 01:00:00           2011               1             1   \n",
       "2 2011-01-01 02:00:00           2011               1             1   \n",
       "3 2011-01-01 03:00:00           2011               1             1   \n",
       "4 2011-01-01 04:00:00           2011               1             1   \n",
       "\n",
       "   datetime-hour  datetime-minute  datetime-second  datetime-dayofweek  \n",
       "0              0                0                0                   5  \n",
       "1              1                0                0                   5  \n",
       "2              2                0                0                   5  \n",
       "3              3                0                0                   5  \n",
       "4              4                0                0                   5  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 판다스(Pandas)의 to_datetime을 활용해 datetime 컬럼의 타입을 문자열(String)에서 날짜/시간(datetime) 데이터로 다룹니다.\n",
    "train[\"datetime\"] = pd.to_datetime(train[\"datetime\"])\n",
    "\n",
    "# train 데이터에 연, 월, 일, 시, 분, 초를 나타내는 새로운 컬럼을 생성합니다.\n",
    "# 각각의 이름을 datetime-year/month/day/hour/minute/second라고 가정합니다.\n",
    "# 이 컬럼에 날짜(datetime) 컬럼의 dt(datetime의 약자입니다) 옵션을 활용하여 연월일시분초를 따로 넣어줍니다.\n",
    "train[\"datetime-year\"] = train[\"datetime\"].dt.year\n",
    "train[\"datetime-month\"] = train[\"datetime\"].dt.month\n",
    "train[\"datetime-day\"] = train[\"datetime\"].dt.day\n",
    "train[\"datetime-hour\"] = train[\"datetime\"].dt.hour\n",
    "train[\"datetime-minute\"] = train[\"datetime\"].dt.minute\n",
    "train[\"datetime-second\"] = train[\"datetime\"].dt.second\n",
    "train[\"datetime-dayofweek\"] = train[\"datetime\"].dt.dayofweek\n",
    "\n",
    "# train 변수에 할당된 데이터의 행렬 사이즈를 출력합니다.\n",
    "# 출력은 (row, column) 으로 표시됩니다.\n",
    "print(train.shape)\n",
    "\n",
    "# .head()로 train 데이터의 상위 5개를 띄우되,\n",
    "# datetime과 이와 연관된 나머지 일곱 개의 컬럼만을 출력합니다.\n",
    "train[[\"datetime\", \"datetime-year\", \"datetime-month\", \"datetime-day\", \"datetime-hour\", \"datetime-minute\", \"datetime-second\",\"datetime-dayofweek\"]].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(6493, 16)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>datetime</th>\n",
       "      <th>datetime-year</th>\n",
       "      <th>datetime-month</th>\n",
       "      <th>datetime-day</th>\n",
       "      <th>datetime-hour</th>\n",
       "      <th>datetime-minute</th>\n",
       "      <th>datetime-second</th>\n",
       "      <th>datetime-dayofweek</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-01-20 00:00:00</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011-01-20 01:00:00</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-01-20 02:00:00</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-01-20 03:00:00</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-01-20 04:00:00</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             datetime  datetime-year  datetime-month  datetime-day  \\\n",
       "0 2011-01-20 00:00:00           2011               1            20   \n",
       "1 2011-01-20 01:00:00           2011               1            20   \n",
       "2 2011-01-20 02:00:00           2011               1            20   \n",
       "3 2011-01-20 03:00:00           2011               1            20   \n",
       "4 2011-01-20 04:00:00           2011               1            20   \n",
       "\n",
       "   datetime-hour  datetime-minute  datetime-second  datetime-dayofweek  \n",
       "0              0                0                0                   3  \n",
       "1              1                0                0                   3  \n",
       "2              2                0                0                   3  \n",
       "3              3                0                0                   3  \n",
       "4              4                0                0                   3  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# train 데이터와 마찬가지로 test 데이터의 datetime 컬럼도 마찬가지로 문자열(String)에서 날짜/시간(datetime) 데이터로 다룹니다.\n",
    "test[\"datetime\"] = pd.to_datetime(test[\"datetime\"])\n",
    "\n",
    "# test 데이터와 train 데이터와 동일하게 연, 월, 일, 시, 분, 초 컬럼을 생성합니다.\n",
    "test[\"datetime-year\"] = test[\"datetime\"].dt.year\n",
    "test[\"datetime-month\"] = test[\"datetime\"].dt.month\n",
    "test[\"datetime-day\"] = test[\"datetime\"].dt.day\n",
    "test[\"datetime-hour\"] = test[\"datetime\"].dt.hour\n",
    "test[\"datetime-minute\"] = test[\"datetime\"].dt.minute\n",
    "test[\"datetime-second\"] = test[\"datetime\"].dt.second\n",
    "test[\"datetime-dayofweek\"] = test[\"datetime\"].dt.dayofweek\n",
    "\n",
    "# test 변수에 할당된 데이터의 행렬 사이즈를 출력합니다.\n",
    "# 출력은 (row, column) 으로 표시됩니다.\n",
    "print(test.shape)\n",
    "\n",
    "# .head()로 test 데이터의 상위 5개를 띄우되,\n",
    "# datetime과 이와 연관된 나머지 일곱 개의 컬럼만을 출력합니다.\n",
    "test[[\"datetime\", \"datetime-year\", \"datetime-month\", \"datetime-day\", \"datetime-hour\", \"datetime-minute\", \"datetime-second\",\"datetime-dayofweek\"]].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Explore\n",
    "\n",
    "전처리(Preprocesing)를 끝냈으면 그 다음에는 데이터를 분석해보겠습니다.\n",
    "\n",
    "주어진 데이터를 시각화나 분석 툴을 통해 다양한 관점에서 이해하는 과정을 탐험적 데이터 분석([Exploratory Data Analysis](https://en.wikipedia.org/wiki/Exploratory_data_analysis))이라고 합니다. 저번 타이타닉 문제와 마찬가지로, 이번에도 파이썬의 데이터 시각화 패키지인 ([matplotlib](https://matplotlib.org))와 [seaborn](https://seaborn.pydata.org/) 을 활용해서 분석해보겠습니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# matplotlib로 실행하는 모든 시각화를 자동으로 쥬피터 노트북에 띄웁니다.\n",
    "# seaborn 도 결국에는 matplotlib를 기반으로 동작하기 때문에, seaborn으로 실행하는 모든 시각화도 마찬가지로 쥬피터 노트북에 자동적으로 띄워집니다.\n",
    "%matplotlib inline\n",
    "\n",
    "# 데이터 시각화 패키지 seaborn을 로딩합니다. 앞으로는 줄여서 sns라고 사용할 것입니다.\n",
    "import seaborn as sns\n",
    "\n",
    "# 데이터 시각화 패키지 matplotlib를 로딩합니다. 앞으로는 줄여서 plt라고 사용할 것입니다.\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### datetime\n",
    "\n",
    "먼저 분석할 컬럼은 **날짜(datetime)** 컬럼입니다. 날짜 컬럼은 [Bike Sharing Demand](https://www.kaggle.com/c/bike-sharing-demand) 경진대회의 핵심 컬럼이라고 볼 수 있으며, 이번 경진대회에서 상위 성적을 올리고 싶다면 날짜 컬럼을 완벽하게 이해하는 것이 무엇보다도 중요합니다.\n",
    "\n",
    "먼저 연/월/일/시/분/초에 따른 자전거 대여량을 시각화 해보겠습니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q1-1) 시각화를 하기 전에 어떤 그림이 나올 것으로 예상하시나요? 최소 3가지 아이디어를 생각해보세요.\n",
    "\n",
    "**주의**: 이 내용은 반드시 **시각화를 하기 전에 작성하셔야 합니다.** 그래야 시각화 결과와 본인의 아이디어를 비교해서 차이를 발견할 수 있습니다.\n",
    "\n",
    "1. 일단 분(```Dates-minute```), 초(```Dates-second```)는 자전거 대여량을 판가름하는데 별 영향이 없을 것 같습니다. 가령 현재 시간이 37분이면 자전거를 대여하고, 43분이면 자전거를 대여하지 않는 행동을 하지는 않을 것입니다. 그러므로 countplot으로 시각화를 해보면, 마치 [Uniform Distribution](https://m.blog.naver.com/running_p/90179231685)과 같은 모양이 나올 것 같습니다.\n",
    "\n",
    "1. 그리고 일(```Dates-day```)도 비슷합니다. 하지만 일(```Dates-day```)은 분과 초와는 다르게, 1) 2월에는 28일 이후가 존재하지 않기 때문에, 29, 30, 31일은 다른 날보다 데이터가 적을 수도 있습니다. (예외적으로 2012년은 2월 29일이 있습니다), 비슷하게 2) 31일의 경우에는 다른 날에 비해 데이터가 절반밖에 되지 않을 것입니다. 하지만 우리는 데이터의 갯수보다는 날짜별 자전거의 평균 대여량이 중요하기 때문에, 실제 분석에는 큰 영향을 미치지 않을 것으로 예상합니다.\n",
    "\n",
    "1. 이런 사항 외에도, 사람의 행동 패턴 상으로 날짜나 시간이라는 개념이 자전거를 대여하는데 중요한 영향을 미칠 것 같습니다. 가령 1) 시간(hour)을 기준으로 새벽보다는 오후에 사람들이 자전거를 많이 빌릴것이며, 2) 월(month)을 기준으로 추운 여름보다는 따뜻한 봄이나 가을, 내지는 더운 여름이 더 많이 빌릴 것 같습니다.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "자, 그럼 위 예상과 실제 데이터가 일치하는지 데이터 시각화를 통해 살펴보도록 하겠습니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x147eb2cfa20>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x576 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# matplotlib의 subplots를 사용합니다. 이 함수는 여러 개의 시각화를 한 화면에 띄울 수 있도록 합니다.\n",
    "# 이번에는 2x3으로 총 6개의 시각화를 한 화면에 띄웁니다.\n",
    "figure, ((ax1, ax2, ax3), (ax4, ax5, ax6)) = plt.subplots(nrows=2, ncols=3)\n",
    "\n",
    "# 시각화의 전체 사이즈는 18x8로 설정합니다.\n",
    "figure.set_size_inches(18, 8)\n",
    "\n",
    "# seaborn의 barplot으로 subplots의 각 구역에\n",
    "# 연, 월, 일, 시, 분, 초 별 자전거 대여량을 출력합니다.\n",
    "sns.barplot(data=train, x=\"datetime-year\", y=\"count\", ax=ax1)\n",
    "sns.barplot(data=train, x=\"datetime-month\", y=\"count\", ax=ax2)\n",
    "sns.barplot(data=train, x=\"datetime-day\", y=\"count\", ax=ax3)\n",
    "sns.barplot(data=train, x=\"datetime-hour\", y=\"count\", ax=ax4)\n",
    "sns.barplot(data=train, x=\"datetime-minute\", y=\"count\", ax=ax5)\n",
    "sns.barplot(data=train, x=\"datetime-second\", y=\"count\", ax=ax6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q1-2) 이 시각화로 발견할 수 있는 사실은 어떤 게 있을까요? 그리고 앞서 우리의 예상과 어떤 차이가 있나요?\n",
    "\n",
    "**datetime-year**\n",
    "  * 2011년도의 자전거 대여량보다 2012년도의 자전거 대여량이 더 높습니다. 이는 [Bike Sharing Demand](https://www.kaggle.com/c/bike-sharing-demand) 경진대회를 주최한 [Capital Bikeshare](https://www.capitalbikeshare.com/)사가 꾸준히 성장하고 있다고 간주할 수 있습니다.\n",
    "\n",
    "**datetime-month**\n",
    "  * 주로 여름(6~8월)에 자전거를 많이 빌리며, 겨울(12~2월)에는 자전거를 많이 빌리지 않습니다.\n",
    "  * 같은 겨울이라도 12월의 자전거 대여량이 1월의 자전거 대여량보다 두 배 가까이 높아 보입니다. 하지만 여기에는 숨겨진 비밀이 있는데, 다음에 나올 다른 시각화에서 자세히 살펴보겠습니다.\n",
    "  \n",
    "**datetime-day**\n",
    "  * x축을 자세히 보면 1일부터 19일까지밖에 없습니다. 20일은 어디에 있을까요? 바로 test 데이터에 있습니다. 이 시각화에서 알 수 있는 내용은, train 데이터와 test 데이터를 나누는 기준이 되는 컬럼이 바로 ```datetime-day```라는 것입니다. 그러므로 21일 이후의 자전거 대여량에 대해서는 우리도 알 수 없고, 머신러닝 알고리즘도 알지 못할 것입니다.\n",
    "\n",
    "**datetime-hour**\n",
    "  * 새벽 시간에는 사람들이 자전거를 빌리지 않으며, 오후 시간에 상대적으로 자전거를 많이 빌립니다.\n",
    "  * 특이하게도 두 부분에서 사람들이 자전거를 특별히 많이 빌리는 현상이 있습니다. 바로 출근 시간(7~9시)과 퇴근 시간(16시~19시) 입니다.\n",
    "  * 물론 출퇴근시간이 아닌 다른 시간대에 자전거를 빌리는 경우도 존재합니다. 이는 다음에 나올 다른 시각화에서 자세히 살펴보겠습니다.\n",
    "\n",
    "**datetime-minute** & **datetime-second**\n",
    "  * 이 두 컬럼은 x축이 모두 0으로 되어있습니다. 즉, **datetime-minute**과 **datetime-second**은 기록되고 있지 않다는 사실을 알 수 있습니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "자, 이제 더 중요한 사실에 대해서 고민해 보도록 하겠습니다.\n",
    "\n",
    "우리에게 중요한건 데이터에 어떤 특징이 있는지 발견하는 것도 있지만, **이 특징을 활용해 앞으로 사용할 머신러닝 알고리즘을 개선시킬 수 있는가?**가 더 중요합니다. 또한 개선을 한다면 구체적으로 어떤 방식으로 개선하는지도 중요하겠죠."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q1-3) 이 사실을 통해 어떻게 예측 모델을 개선할 수 있을까요? 최소 3가지 아이디어를 내보세요.\n",
    "\n",
    "1. 먼저 분(```datetime-minute```)과 초(```datetime-second```)는 기록되지 않기 때문에 굳이 사용할 필요가 없을 것 같습니다. 차후에 머신러닝 알고리즘에 적용할 때, 이 부분은 feature에서 제거해도 될 것 같습니다.\n",
    "2. 앞서 설명한대로, train 데이터와 test 데이터를 나누는 기준이 되는 컬럼이 바로 일(```datetime-day```) 컬럼입니다. 이런 경우 **datetime-day**를 feature로 집어넣으면 머신러닝 알고리즘이 과적합([overfitting](https://hyperdot.wordpress.com/2017/02/06/%EA%B3%BC%EC%A0%81%ED%95%A9overfitting/)) 되는 현상이 일어날 수 있습니다. 그러므로 train 데이터와 test 데이터를 나누는 기준이 되는 컬럼이 있으면, 이 컬럼은 feature로 사용하지 않는 것이 좋을 것 같습니다.\n",
    "3. 이외에도 시(```datetime-hour```)컬럼을 보면 출퇴근시간에 사람들이 자전거를 많이 빌린다는 사실을 알 수 있습니다. 그렇다면, 만일 머신러닝 알고리즘이 출퇴근시간이라는 개념을 이해하지 못한다고 하면 이를 별도의 feature로 넣어주면 성능 향상을 꾀할 수 있을 듯 합니다. (다만 아쉽게도, ```workingday```라는 컬럼이 이 역할을 대신하고 있을 것입니다)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### weather 컬럼 분석\n",
    "\n",
    "그 다음 분석하고 싶은 컬럼은 날씨를 나타내는 ```weather``` 컬럼입니다. 이 컬럼을 다음의 값을 가지며, 구체적인 설명은 다음과 같습니다.\n",
    "\n",
    "  * 1: 아주 깨끗한 날씨입니다. 또는 아주 약간의 구름이 끼어있습니다.\n",
    "  * 2: 약간의 안개와 구름이 끼어있는 날씨입니다.\n",
    "  * 3: 약간의 눈, 비가 오거나 천둥이 칩니다.\n",
    "  * 4: 아주 많은 비가 오거나 우박이 내립니다.\n",
    "\n",
    "이 데이터를 엑셀 분석, 내지는 시각화하여 weather에 따라 자전거 대여량이 어떻게 변하는지 살펴보도록 하겠습니다.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q2-1) 시각화를 하기 전에 어떤 그림이 나올 것으로 예상하시나요? 최소 3가지 아이디어를 생각해보세요.\n",
    "\n",
    "**주의**: 이 내용은 반드시 **시각화를 하기 전에 작성하셔야 합니다.** 그래야 시각화 결과와 본인의 아이디어를 비교해서 차이를 발견할 수 있습니다.\n",
    "\n",
    "1. 일단 당연하지만 안 좋은 날씨일수록 자전거 대여량이 낮아질 것 같습니다. 1(깨끗한 날씨)의 경우보다 4(아주 많은 비나 우박이 오는 날씨)인 경우에 자전거를 덜 빌릴 것입니다.\n",
    "2. 그리고 값이 숫자(1, 2, 3, 4)로 되어있지만, 실제로는 수의 높고 낮은 관계가 존재하지 않을 것입니다. (이를 전문용어로 연속형(continuous) 데이터 vs 범주형(categorical) 데이터라고 합니다) 그러므로 보이는 것과는 다르게, 실제로는 범주형(categorical) 데이터로 처리해야 할 것입니다.\n",
    "3. 아주 심하진 않겠지만, 날씨마다의 편차가 있을 것입니다. 가령 어떤 날은 날씨가 좋아도 안 빌리고, 어떤 날은 날씨가 안 좋아도 많이 빌릴 수도 있습니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "이번에도 위 예상과 실제 데이터가 일치하는지 데이터 시각화를 통해 살펴보도록 하겠습니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x147eb44c438>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# seaborn의 barplot으로 날씨(weather) 데이터를 시각화합니다.\n",
    "# x축에는 날씨(weather) 데이터를, y축에는 자전거 대여량(count)을 출력합니다.\n",
    "sns.barplot(data=train, x=\"weather\", y=\"count\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q2-2) 이 시각화로 발견할 수 있는 사실은 어떤 게 있을까요? 그리고 앞서 우리의 예상과 어떤 차이가 있나요?\n",
    "\n",
    "1. 앞서 생각한대로 날씨(```weather```)가 안 좋을수록 자전거 대여량이 낮아지는 현상을 발견할 수 있었습니다. 즉, 날씨(```weather```)값이 3보다 2가, 2보다 1이 더 자전거를 많이 빌리는 현상이 보입니다.\n",
    "2. 하지만 굉장히 특이하게도 날씨가 4인 경우, 즉 아주 많은 비가 오거나 우박이 내리는 경우에 자전거를 많이 빌리는 현상이 보입니다. 심지어는 날씨가 2인 경우(약간의 안개나 구름)에 못지 않게 자전거를 많이 빌리는 사실을 알 수 있습니다.\n",
    "3. 그리고 시각화에서 신뢰 구간(confidence interval)을 상징하는 검은색 세로 선이 날씨가 4인 경우에는 보이지 않습니다. 추측컨데 날씨가 4인 경우에는 일반적인 분포와는 다소 다른 현상이 일어나고 있다고 판단할 수 있습니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q2-3) 이 사실을 통해 어떻게 예측 모델을 개선할 수 있을까요? 최소 3가지 아이디어를 내보세요.\n",
    "\n",
    "1. 날씨(```weather```) 컬럼값이 1 ~ 3인 것만 봤을 때, 이 컬럼을 머신러닝 알고리즘에 feature로 넣으면 우리가 별도의 룰을 설정해주지 않아도 머신러닝 알고리즘이 알아서 날씨(```weather```)에 따른 자전거 대여량의 변화량을 예측할 수 있을 것 같습니다. 아마도 날씨가 좋을 수록(1에 가까울수록) 자전거를 많이 빌리고, 안 좋을수록(3에 가까울수록) 자전거를 덜 빌릴 것 같습니다.\n",
    "1. 하지만 신뢰 구간(confidence interval)을 보면 알 수 있듯이, 날씨(```weather```) 컬럼값이 4인 경우는 매우 부족합니다. (train 데이터 10,886개 기준 1개 밖에 없음) 그러므로 이 데이터를 제거하거나, 날씨(```weather```) 컬럼값이 4인 경우는 3으로 바꿔주면 머신러닝 알고리즘이 상대적으로 모수가 적은 데이터를 가지고 조건을 만들려는 시도를 하지 않기 때문에, 미묘하지만 성능 향상이 있을 것으로 예상합니다.\n",
    "1. 또한 날씨(```weather```) 컬럼은 연속적(continuous)인 것 처럼 보이지만, 범주형(categorical) 데이터같은 느낌도 있습니다. 그렇기 때문에, 마치 타이타닉 경진대회에서 선착장(```Embarked```) 컬럼을 One Hot Encoding했던 것 처럼, 이 컬럼도 One Hot Encoding을 한다면 머신러닝 알고리즘이 이 데이터를 범주형(categorical) 값으로 인식하여 성능이 좋아질 가능성이 있습니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### windspeed 컬럼 분석\n",
    "\n",
    "그 다음 분석하고 싶은 컬럼은 날씨를 나타내는 풍속을 나타내는 ```windspeed``` 컬럼입니다. 이 컬럼은 0에서 56까지의 값을 가집니다. 이 데이터도 시각화 해보도록 하겠습니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q3-1) 시각화를 하기 전에 어떤 그림이 나올 것으로 예상하시나요? 최소 3가지 아이디어를 생각해보세요.\n",
    "\n",
    "1. 이 데이터는 연속형(continuous) 자료이므로 분포를 시각화하면 전형적인 [정규 분포](https://ko.wikipedia.org/wiki/%EC%A0%95%EA%B7%9C_%EB%B6%84%ED%8F%AC)가 나올 것입니다.\n",
    "2. 하지만 이 데이터는 현실 세계의 데이터이기 때문에, 이론처럼 완벽한 정규 분포가 나오지는 않을 것입니다. 아마도 추측컨데 1) 몇몇 아웃라이어가 존재하거나, 2) 바람이 특별하게 많이 불어서 분포의 오른쪽이 길게 늘어지는 현상이 생길 것 같습니다.\n",
    "3. 그리고 추측컨데 바람이 너무 많이 불면 사람들이 자전거를 덜 빌릴 것으로 예상합니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "위 예상과 실제 데이터가 일치하는지 다시 한 번 살펴보도록 하겠습니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x147eb8630b8>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# matplotlib를 활용해 그래프의 사이즈를 가로로 길게(18) 늘리고, 세로로 짧게(4) 줄입니다.\n",
    "plt.figure(figsize = (18, 4))\n",
    "\n",
    "# seaborn의 distplot으로 풍속(windspeed) 데이터를 시각화합니다.\n",
    "# windspeed 데이터의 전체 분포(distribution)을 시각화합니다.\n",
    "sns.distplot(train[\"windspeed\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x147eb51edd8>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABCUAAAEGCAYAAABSCC+tAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjAsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+17YcXAAAgAElEQVR4nOzdd3iT193G8e/x3sbYxjYeGLM3BAIEsveezQ5Ns5smbdOkbTrfpm+bvh1p2iRtNs1eZO8mJCEEkmAwe4PxHnjvbel5/5AsbGyMAcuSzf25Ll+SniEd2bKk537O+R1jWRYiIiIiIiIiIgPNx9MNEBEREREREZGjk0IJEREREREREfEIhRIiIiIiIiIi4hEKJURERERERETEIxRKiIiIiIiIiIhH+Hm6AUciJibGSk1N9XQzRERERERERGQ/a9euLbcsK7a3bQZ1KJGamkpGRoanmyEiIiIiIiIi+zHG5B5sGw3fEBERERERERGPUCghIiIiIiIiIh6hUEJEREREREREPEKhhIiIiIiIiIh4hEIJEREREREREfEIhRIiIiIiIiIi4hEKJURERERERETEI/w83QARERERERER8Q6LFqdTUNVEUlQwL9w0z+2Pp1BCRERERERERAAoqGoiu7xhwB7PbcM3jDFBxpjVxpiNxpitxpjfO5c/a4zJNsZscP7MdC43xpiHjTGZxphNxphj3NU2EREREREREfE8d/aUaAFOtSyr3hjjD6w0xnzsXPczy7Le2G/7c4Bxzp95wGPOSxEREREREREZgtzWU8JyqHfe9Hf+WL3schHwvHO/VcAwY0yCu9onIiIiIiIiIp7l1tk3jDG+xpgNQCmw1LKsdOeq+51DNP5hjAl0LksE8jvtXuBcJiIiIiIiIiJDkFtDCcuybJZlzQSSgLnGmKnAL4GJwLHAcOBe5+amp7vYf4Ex5lZjTIYxJqOsrMxNLRcRERERERERd3NrKNHBsqxq4EvgbMuyip1DNFqAZ4C5zs0KgOROuyUBRT3c15OWZc2xLGtObGysm1suIiIiIiIiIu7iztk3Yo0xw5zXg4HTgR0ddSKMMQa4GNji3OU94LvOWTjmAzWWZRW7q30iIiIiIiIi4lnunH0jAXjOGOOLI/xYYlnWB8aYL4wxsTiGa2wAvu/c/iPgXCATaARucGPbRERERERERMTD3BZKWJa1CZjVw/JTD7C9BdzhrvaIiIiIiIiIiHdxZ08JERERERGRIW/R4nQKqppIigrmhZvmebo5IoOKQgkREREREZEjUFDVRHZ5g6ebITIoDcjsGyIiIiIiIiIi+1MoISIiIiIiIiIeoVBCRERERERERDxCoYSIiIiIiIiIeIRCCRERERERERHxCIUSIiIiIiIiIuIRCiVERERERERExCMUSoiIiIiIiIiIRyiUEBERERERERGPUCghIiIiIiIiIh6hUEJEREREREREPEKhhIiIiIiIiIh4hEIJEREREREREfEIhRIiIiIiIiIi4hEKJURERERERETEIxRKiIiIiIiIiIhHKJQQEREREREREY9wWyhhjAkyxqw2xmw0xmw1xvzeuXy0MSbdGLPbGPOaMSbAuTzQeTvTuT7VXW0TEREREREREc9zZ0+JFuBUy7JmADOBs40x84G/AP+wLGscUAXc5Nz+JqDKsqyxwD+c24mIiIiIiIjIEOW2UMJyqHfe9Hf+WMCpwBvO5c8BFzuvX+S8jXP9acYY4672iYiIiIiIiIhnubWmhDHG1xizASgFlgJ7gGrLstqdmxQAic7riUA+gHN9DRDdw33eaozJMMZklJWVubP5IiIiIiIiIuJGbg0lLMuyWZY1E0gC5gKTetrMedlTrwir2wLLetKyrDmWZc2JjY3tv8aKiIiIiIiIyIAakNk3LMuqBr4E5gPDjDF+zlVJQJHzegGQDOBcHwlUDkT7RERERERERGTguXP2jVhjzDDn9WDgdGA7sAz4jnOz64F3ndffc97Guf4Ly7K69ZQQERERkaFh0eJ0TnngSxYtTvd0U0RExEP8Dr7JYUsAnjPG+OIIP5ZYlvWBMWYb8Kox5o/AemCxc/vFwAvGmEwcPSSucmPbRERERMTDCqqayC5v8HQzRETEg9wWSliWtQmY1cPyLBz1JfZf3gxc7q72iIiIiIiIiIh3GZCaEiIiIiIiIiIi+1MoISIiIiIiIiIeoVBCRERERERERDxCoYSIiIiIiIiIeIQ7Z98QERERERGRo9yixekUVDWRFBXMCzfN83RzxMsolBARERERERG30fS/0huFEiIiIiIiIiJHObvdYlVWBTVNbY7bljUgj6tQQkREREREROQotqukjttfXMuesn09WvIqG3ltTR5XHpvi1sdWoUsRERER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\n",
      "text/plain": [
       "<Figure size 1296x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# matplotlib를 활용해 그래프의 사이즈를 가로로 길게(18) 늘리고, 세로로 짧게(4) 줄입니다.\n",
    "plt.figure(figsize = (18, 4))\n",
    "\n",
    "# seaborn의 pointplot으로 풍속(windspeed)에 따른 자전거 대여량의 변화를 시각화합니다.\n",
    "# x축에는 풍속(windspeed)을, y축에는 자전거 대여량(count)을 집어넣습니다.\n",
    "sns.pointplot(data = train, x=\"windspeed\", y=\"count\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.    0.003 0.998 0.001 1.    0.998 0.001 0.998 0.001 0.003 0.003 0.999\n",
      " 0.999 0.003 0.002 0.998 0.997 0.001 0.001 0.001 0.999 0.997 0.999 0.002\n",
      " 0.002 0.001 0.997 0.999]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x147eb72d0b8>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 풍속(windspeed)데이터에서 소수점이 아닌 나머지를 제거합니다.\n",
    "# 가령 풍속이 16.9979일 경우, 이를 정수형(int)으로 변환하여 16으로 만든 뒤 두 개를 뺍니다. (그러면 0.9979가 나옵니다)\n",
    "# 이를 windspeed(point)라는 이름의 새로운 컬럼에 할당합니다.\n",
    "#train[\"windspeed(point)\"] = train[\"windspeed\"] - train[\"windspeed\"].astype('int')\n",
    "\n",
    "# windspeed(point) 컬럼의 중복을 제거하여 종류를 출력합니다.\n",
    "# 간결할 형태로 출력하기 위해, 소수점 3자리로 줄입니다.\n",
    "#print(train[\"windspeed(point)\"].unique().round(3))\n",
    "\n",
    "# seaborn의 distplot으로 풍속(windspeed) 데이터를 시각화합니다.\n",
    "# windspeed 데이터의 전체 분포(distribution)을 시각화합니다.\n",
    "#sns.distplot(train[\"windspeed(point)\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q3-2) 이 시각화로 발견할 수 있는 사실은 어떤 게 있을까요? 그리고 앞서 우리의 예상과 어떤 차이가 있나요?\n",
    "\n",
    "1. 분포는 전반적으로 정규 분포가 나오지만, 1) 값이 연속적(continuous)이지 않고 듬성듬성 떨어져 있습니다. 즉, 이 데이터는 연속형(continuous) 데이터가 아닌 범주형(categorical) 데이터에 가까워 보입니다.\n",
    "2. 더 특이한건, 풍속이 0인 경우가 굉장히 많으며, 정규 분포가 이상하게 보일 정도로 비중이 높습니다.\n",
    "3. 또한 풍속이 과하게 높을수록 자전거를 덜 빌리는 현상이 보이는 것 같은데, 이는 전반적으로 모수가 부족한 듯 하여 신뢰도가 높지 않습니다. 다만 풍속이 낮을 경우에 전반적으로 자전거 대여량이 낮은 현상이 보입니다. (이는 우리가 예상하지 못한 현상입니다)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q3-3) 이 사실을 통해 어떻게 예측 모델을 개선할 수 있을까요? 최소 3가지 아이디어를 내보세요.\n",
    "\n",
    "1. 이 풍속(windspeed) 데이터를 머신러닝 알고리즘에 집어넣으면 머신러닝 알고리즘의 풍속에 따른 자전거 대여량의 변화를 스스로 판단할 수 있을 것 같습니다. 더 정확히는, 풍속이 낮거나 높을수록 자전거를 덜 빌리고, 풍속이 적당할 때 자전거를 더 많이 빌린다는 사실을 알 수 있습니다.\n",
    "1. 풍속(windspeed)이 0인 경우는, 실제로는 풍속이 0이 아니라 값이 비어있을(NaN) 가능성이 있습니다. 이 경우에는 풍속(windspeed) 데이터를 머신러닝 알고리즘에 그대로 집어넣을 경우, 실제로는 바람이 불었지만 머신러닝 알고리즘 입장에서는 바람이 불지 않았다고 간주할 수 있습니다. 이 문제를 해결해준다면 머신러닝 알고리즘의 성능을 크게 끌어올릴 수 있을 것 같습니다.\n",
    "1. 또한 풍속(windspeed)의 소수점을 자세히 보시면, 0.001xx, 0.002xx, 0.003xx나, 0.999xx, 0.998xx, 0.997xx가 대부분입니다. 즉, 이 값은 실수형(float)이 아닌 정수형(int)이라고 간주할 수 있습니다. 알고리즘에 따라 다르겠지만, 풍속(windspeed) 데이터를 그대로 넣지 않고 반올림한 뒤 정수형(int) 데이터로 넣어주면 더 좋은 결과가 나올 수도 있습니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### temp\n",
    "\n",
    "이번에 분석할 데이터는 온도(```temp```) 컬럼입니다. 여기서부터는 제가 직접 하지 않고, 여러분들을 위한 과제로 제공하겠습니다. 앞서 컬럼들을 분석했던 것 처럼, 온도(```temp```) 컬럼도 직접 분석해보세요. \n",
    "\n",
    "힌트: 온도(```temp```) 컬럼만으로 좋은 분석 결과가 나오지 않는다면, 체감온도(```atemp```)를 포함한 다른 컬럼을 활용하여 시각화해보세요. 시각화는 [lmplot](https://seaborn.pydata.org/generated/seaborn.lmplot.html?highlight=lmplot#seaborn.lmplot)이나 [scatterplot](https://seaborn.pydata.org/generated/seaborn.scatterplot.html?highlight=scatterplot#seaborn.scatterplot)을 사용하면 직관적인 시각화를 할 수 있을 것입니다. (단 ```scatterplot```은 seaborn의 버전이 낮으면 실행되지 않으니 이 점 주의해주세요. 이 경우는 버전을 업그레이드 한 뒤 사용하시면 됩니다)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q4-1) 온도(```temp```) 컬럼을 시각화 하기 전에 어떤 그림이 나올 것으로 예상하시나요?\n",
    "주의: 이 내용은 반드시 시각화를 하기 전에 작성하셔야 합니다. 그래야 시각화 결과와 본인의 아이디어를 비교해서 차이를 발견할 수 있습니다.\n",
    "\n",
    "1. 풍속(```windspeed```) 데이터와 마찬가지로, 이 데이터는 연속형(continuous) 자료이므로 분포를 시각화하면 전형적인 [정규 분포](https://ko.wikipedia.org/wiki/%EC%A0%95%EA%B7%9C_%EB%B6%84%ED%8F%AC)가 나올 것입니다.\n",
    "1. 또한 온도(```temp```)가 높으면 자전거를 덜 빌릴 것 같고, 정 반대로 온도가 낮으면 자전거를 많이 빌릴 것 같습니다. (하지만 온도가 너무 낮은 경우는 자전거를 덜 빌릴 것 같습니다)\n",
    "1. 온도(```temp```)와 체감온도(```atemp```)는 서로 상관관계가 높으며, 사실상 거의 같은 성향의 데이터라고 간주할 수 있습니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### temp 컬럼 시각화하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x147eb705d68>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# seaborn의 lmplot으로 온도(temp)와 체감온도(atemp)의 상관관계를 시각화합니다.\n",
    "# 여기서 추세선을 그리지 않기 위해 fit_reg 옵션은 False로 줍니다.\n",
    "sns.lmplot(data=train, x=\"temp\", y=\"atemp\", fit_reg=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 9.84,  9.02,  8.2 , 13.12, 15.58, 14.76, 17.22, 18.86, 18.04,\n",
       "       16.4 , 13.94, 12.3 , 10.66,  6.56,  5.74,  7.38,  4.92, 11.48,\n",
       "        4.1 ,  3.28,  2.46, 21.32, 22.96, 23.78, 24.6 , 19.68, 22.14,\n",
       "       20.5 , 27.06, 26.24, 25.42, 27.88, 28.7 , 30.34, 31.16, 29.52,\n",
       "       33.62, 35.26, 36.9 , 32.8 , 31.98, 34.44, 36.08, 37.72, 38.54,\n",
       "        1.64,  0.82, 39.36, 41.  ])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 온도(temp)의 종류를 출력합니다. 생각보다 종류가 많지 않습니다.\n",
    "train[\"temp\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([14.395, 13.635, 12.88 , 17.425, 19.695, 16.665, 21.21 , 22.725,\n",
       "       21.97 , 20.455, 11.365, 10.605,  9.85 ,  8.335,  6.82 ,  5.305,\n",
       "        6.06 ,  9.09 , 12.12 ,  7.575, 15.91 ,  3.03 ,  3.79 ,  4.545,\n",
       "       15.15 , 18.18 , 25.   , 26.515, 27.275, 29.545, 23.485, 25.76 ,\n",
       "       31.06 , 30.305, 24.24 , 18.94 , 31.82 , 32.575, 33.335, 28.79 ,\n",
       "       34.85 , 35.605, 37.12 , 40.15 , 41.665, 40.91 , 39.395, 34.09 ,\n",
       "       28.03 , 36.365, 37.88 , 42.425, 43.94 , 38.635,  1.515,  0.76 ,\n",
       "        2.275, 43.18 , 44.695, 45.455])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 체감온도(atemp)의 종류를 출력합니다. 생각보다 종류가 많지 않습니다.\n",
    "train[\"atemp\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x147ebcf75c0>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x864 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 온도(temp)와 체감온도(atemp)는 반올림하여\n",
    "# 각각 temp(int)와 atemp(int)라는 이름의 새로운 컬럼에 할당합니다.\n",
    "train[\"temp(int)\"] = train[\"temp\"].round()\n",
    "train[\"atemp(int)\"] = train[\"atemp\"].round()\n",
    "\n",
    "# matplotlib를 활용해 그래프의 사이즈를 가로로 길게(18) 늘리고, 세로로 짧게(4) 줄입니다.\n",
    "plt.figure(figsize = (12, 12))\n",
    "\n",
    "# 이번에는 scatterplot을 활용해 온도(temp), 체감온도(atemp),\n",
    "# 그리고 풍속(windspeed)과 자전거 대여량(count)간의 상관관계를 시각화합니다.\n",
    "# 주의: 이 코드는 seaborn의 버전이 0.9 이상이어야 합니다. 만일 실행이 되지 않는다면 seaborn의 버전을 업그레이드 해주세요.\n",
    "sns.scatterplot(data=train, x=\"temp(int)\", y=\"atemp(int)\", hue=\"windspeed\", size=\"count\", sizes=(0, 150))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>temp(int)</th>\n",
       "      <th>atemp(int)</th>\n",
       "      <th>temp(difference)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>-4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>-5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>-5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>-4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>-4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   temp(int)  atemp(int)  temp(difference)\n",
       "0       10.0        14.0              -4.0\n",
       "1        9.0        14.0              -5.0\n",
       "2        9.0        14.0              -5.0\n",
       "3       10.0        14.0              -4.0\n",
       "4       10.0        14.0              -4.0"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 정수형(int)으로 변환한 온도(temp)와 체감온도(atemp)를 빼서\n",
    "# 두 값의 차이를 나타내는 temp(difference)라는 새로운 컬럼을 추가합니다.\n",
    "train[\"temp(difference)\"] = train[\"temp(int)\"] - train[\"atemp(int)\"]\n",
    "\n",
    "# 정수형(int)으로 변환한 온도(temp)와 체감온도(atemp), 그리고 temp(difference)를 출력합니다.\n",
    "train[[\"temp(int)\", \"atemp(int)\", \"temp(difference)\"]].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x147ec1bbcc0>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# matplotlib를 활용해 그래프의 사이즈를 가로로 길게(18) 늘리고, 세로로 짧게(4) 줄입니다.\n",
    "plt.figure(figsize = (18, 4))\n",
    "\n",
    "# seaborn의 point으로 temp(difference)에 따른 자전거 변화량을 시각화합니다.\n",
    "sns.pointplot(data=train, x=\"temp(difference)\", y=\"count\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-4.0     5106\n",
       "-3.0     2097\n",
       "-2.0     1415\n",
       "-5.0     1049\n",
       "-1.0      509\n",
       "-6.0      405\n",
       " 0.0      219\n",
       " 1.0       32\n",
       "-7.0       21\n",
       " 22.0       5\n",
       "-8.0        5\n",
       " 14.0       5\n",
       " 2.0        4\n",
       " 16.0       3\n",
       " 15.0       3\n",
       " 18.0       3\n",
       " 23.0       2\n",
       " 17.0       1\n",
       " 13.0       1\n",
       " 19.0       1\n",
       "Name: temp(difference), dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# temp(difference)의 종류와 그 개수를 출력합니다.\n",
    "# -6 부터 0을 제외한 나머지는 모수가 부족하므로, 이를 하나로 합쳐줘도 될 것 같습니다.\n",
    "train[\"temp(difference)\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x147ebef24a8>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# temp(difference)가 -6보다 작은 데이터는 -6으로 통일시켜줍니다.\n",
    "train.loc[train[\"temp(difference)\"] < -6, \"temp(difference)\"] = -6\n",
    "\n",
    "# 비슷하게, temp(difference)가 0보다 큰 데이터는 0으로 통일시켜줍니다.\n",
    "train.loc[train[\"temp(difference)\"] >  0, \"temp(difference)\"] = 0\n",
    "\n",
    "# matplotlib를 활용해 그래프의 사이즈를 가로로 길게(18) 늘리고, 세로로 짧게(4) 줄입니다.\n",
    "plt.figure(figsize = (18, 4))\n",
    "\n",
    "# seaborn의 pointplot으로 temp(difference)에 따른 자전거 변화량을 시각화합니다.\n",
    "sns.pointplot(data=train, x=\"temp(difference)\", y=\"count\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q4-2) 이 시각화로 발견할 수 있는 사실은 어떤 게 있을까요? 그리고 앞서 우리의 예상과 어떤 차이가 있나요?\n",
    "\n",
    "1. 앞서 예상과 마찬가지로, 온도(```temp```)와 체감온도(```atemp```)는 연속형(continuous)인 데이터이며, 서로 상관관계가 높다는 사실을 알 수 있습니다.\n",
    "1. 또한 온도(```temp```)나 체감온도(```atemp```)가 낮을수록 자전거를 덜 빌리고, 높을수록 자전거를 많이 빌린다는 사실을 알 수 있습니다.\n",
    "1. 하지만 가끔 온도(```temp```)에 비해서 체감온도(```atemp```)가 상대적으로 높거나 낮은 경우가 있는데, 특히나 체감온도(```atemp```)가 온도(```temp```)보다 높을 경우 자전거를 더 많이 빌린다는 현상을 알 수 있습니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q4-3) 이 사실을 통해 어떻게 예측 모델을 개선할 수 있을까요? 최소 3가지 아이디어를 내보세요.\n",
    "1. 온도(```temp```) 컬럼이 자전거 대여량을 예측하는데 도움이 된다는 사실을 알 수 있습니다. 이 컬럼을 머신러닝 알고리즘에 넣어주면 머신러닝 알고리즘이 온도에 따른 자전거 대여량의 변화량을 예측하면서 성능이 올라갈 것으로 보입니다.\n",
    "\n",
    "1. 또한 비슷하게 체감온도(```atemp```)도 자전거 대여량을 예측하는데 도움이 됩니다. 다만 온도(```temp```)와 체감온도(```atemp```)는 서로 비슷한 성향을 가지기 때문에, 두 컬럼 모두를 넣는건 둘 중 하나만 넣는 것에 비해 머신러닝 알고리즘의 성능을 향상시키는데 큰 도움을 주지는 못할 것입니다.\n",
    "\n",
    "1. 또한 온도(```temp```)와 체감온도(```atemp```)의 차이가 자전거 대여량을 예측하는데 도움이 된다는 새로운 사실을 알 수 있었습니다. 이 정보를 머신러닝 알고리즘에 넣어주면 머신러닝의 성능 향상을 꾀할 수 있을 것으로 보입니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### datetime-dayofweek\n",
    "\n",
    "이번에 분석할 데이터는 요일을 나타내는 데이터, 일명 ```datetime-dayofweek```입니다. 이 데이터는 현재 feature로 가지고 있지만, 날짜와 시간을 나타내는 ```datetime``` 컬럼에서 추출할 수 있습니다. (ex: ```train[\"datetime\"].dt.day_name()```) 앞서 분석과 마찬가지로, 날짜 컬럼도 탐험적 데이터 분석을 통해 분석해보겠습니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10886, 24)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>datetime</th>\n",
       "      <th>datetime-dayofweek</th>\n",
       "      <th>datetime-dayofweek(int)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-01-01 00:00:00</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011-01-01 01:00:00</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-01-01 02:00:00</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-01-01 03:00:00</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-01-01 04:00:00</td>\n",
       "      <td>Saturday</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             datetime datetime-dayofweek  datetime-dayofweek(int)\n",
       "0 2011-01-01 00:00:00           Saturday                        5\n",
       "1 2011-01-01 01:00:00           Saturday                        5\n",
       "2 2011-01-01 02:00:00           Saturday                        5\n",
       "3 2011-01-01 03:00:00           Saturday                        5\n",
       "4 2011-01-01 04:00:00           Saturday                        5"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# train 데이터에 요일을 나타내는 새로운 컬럼을 생성합니다.\n",
    "# 이 컬럼의 이름을 datetime-dayofweek이라고 가정합니다.\n",
    "# 이 컬럼에 날짜(datetime) 컬럼의 dt(datetime의 약자입니다) 옵션을 활용하여 요일 정보를 따로 넣어줍니다.\n",
    "#train[\"datetime-dayofweek\"] = train[\"datetime\"].dt.day_name()\n",
    "\n",
    "# 차후 이 정보를 머신러닝 알고리즘에 집어넣기 위해, 요일을 숫자로 변환한 dayofweek를 사용합니다.\n",
    "# 이 값은 0(월요일) ~ 6(일요일) 사이의 값을 가집니다.\n",
    "# 이를 datetime-dayofweek(int)라는 이름의 변수에 할당합니다.\n",
    "#train[\"datetime-dayofweek(int)\"] = train[\"datetime\"].dt.dayofweek\n",
    "\n",
    "# train 변수에 할당된 데이터의 행렬 사이즈를 출력합니다.\n",
    "# 출력은 (row, column) 으로 표시됩니다.\n",
    "#print(train.shape)\n",
    "\n",
    "# .head()로 train 데이터의 상위 5개를 띄우되,\n",
    "# datetime 컬럼과 요일 컬럼만 출력합니다.\n",
    "#train[[\"datetime\", \"datetime-dayofweek\", \"datetime-dayofweek(int)\"]].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(6493, 17)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>datetime</th>\n",
       "      <th>datetime-dayofweek</th>\n",
       "      <th>datetime-dayofweek(int)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-01-20 00:00:00</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011-01-20 01:00:00</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-01-20 02:00:00</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-01-20 03:00:00</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-01-20 04:00:00</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             datetime datetime-dayofweek  datetime-dayofweek(int)\n",
       "0 2011-01-20 00:00:00           Thursday                        3\n",
       "1 2011-01-20 01:00:00           Thursday                        3\n",
       "2 2011-01-20 02:00:00           Thursday                        3\n",
       "3 2011-01-20 03:00:00           Thursday                        3\n",
       "4 2011-01-20 04:00:00           Thursday                        3"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# train 데이터와 마찬가지로 test 데이터의 datetime 컬럼에서 요일(dayofweek)정보를 뽑아냅니다.\n",
    "#test[\"datetime-dayofweek\"] = test[\"datetime\"].dt.day_name()\n",
    "\n",
    "# 마찬가지로 숫자화된 요일 정보도 같이 가져옵니다.\n",
    "#test[\"datetime-dayofweek(int)\"] = test[\"datetime\"].dt.dayofweek\n",
    "\n",
    "# test 변수에 할당된 데이터의 행렬 사이즈를 출력합니다.\n",
    "# 출력은 (row, column) 으로 표시됩니다.\n",
    "#print(test.shape)\n",
    "\n",
    "# .head()로 test 데이터의 상위 5개를 띄우되,\n",
    "# datetime 컬럼과 요일(datetime-dayofweek) 컬럼만 출력합니다.\n",
    "#test[[\"datetime\", \"datetime-dayofweek\", \"datetime-dayofweek(int)\"]].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q5-1) 요일(datetime-dayofweek) 컬럼을 시각화 하기 전에 어떤 그림이 나올 것으로 예상하시나요?\n",
    "\n",
    "주의: 이 내용은 반드시 시각화를 하기 전에 작성하셔야 합니다. 그래야 시각화 결과와 본인의 아이디어를 비교해서 차이를 발견할 수 있습니다.\n",
    "\n",
    "1. 사람의 생활 패턴은 주중이냐/주말이냐에 따라 극명하게 달라집니다. 그런 의미에서 요일(```datetime-dayofweek```) 컬럼을 시각화하면 어떤 요일이냐에 따라서 자전거 대여량이 다르게 시각화될 것 같습니다.\n",
    "2. 하지만 비슷한 성향을 가진 근무일(```workingday```, 사실상 주중/주말을 나타냅니다) 컬럼과는 달리, 요일(```datetime-dayofweek```) 컬럼은 같은 주말이라고 하더라도 토/일의 차이, 같은 주중이라고 하더라도 월/수/금의 차이가 드러날 것입니다.\n",
    "3. 그리고 사람의 구체적인 생활 패턴에 따라 자전거의 대여량이 달라질 것으로 예상합니다. 가령 출퇴근을 하는 날이냐(출퇴근 시간에 많이 빌릴 것으로 예상합니다), 주말에 노는 날이냐(주중 낮에 많이 빌릴 것으로 예상합니다)에 따라 자전거 대여량이 달라질 것입니다.\n",
    "\n",
    "위 예상과 실제 데이터가 일치하는지 시각화를 통해 분석해보도록 하겠습니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### datetime-dayofweek 컬럼 시각화하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x147ec00c0f0>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# matplotlib를 활용해 그래프의 사이즈를 가로로 길게(18) 늘리고, 세로로 짧게(4) 줄입니다.\n",
    "plt.figure(figsize = (18, 4))\n",
    "\n",
    "# seaborn의 pointplot으로 시간(datetime-hour)에 따른 자전거 변화량을 시각화합니다.\n",
    "sns.pointplot(data=train, x=\"datetime-hour\", y=\"count\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x147ebf3e780>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# matplotlib를 활용해 그래프의 사이즈를 가로로 길게(18) 늘리고, 세로로 짧게(4) 줄입니다.\n",
    "plt.figure(figsize = (18, 4))\n",
    "\n",
    "# seaborn의 pointplot으로 근무일 여부(workingday)와 시간(datetime-hour)에 따른 자전거 변화량을 시각화합니다.\n",
    "# 확실히 근무하는 날과 근무하지 않는 날의 자전거 대여량이 명확하게 차이가 납니다.\n",
    "sns.pointplot(data=train, x=\"datetime-hour\", y=\"count\", hue=\"workingday\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x147ec16b550>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# matplotlib를 활용해 그래프의 사이즈를 가로로 길게(18) 늘리고, 세로로 짧게(4) 줄입니다.\n",
    "plt.figure(figsize = (18, 4))\n",
    "\n",
    "# 시각화할 때 요일의 순서를 명확하게 지정하기 위해, 월~일까지의 영어 호칭을 리스트로 담습니다.\n",
    "# 이를 dayofweek_order라는 이름의 변수에 할당합니다.\n",
    "dayofweek_order = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n",
    "\n",
    "# seaborn의 pointplot으로 요일(datetime-dayofweek)과 시간(datetime-hour)에 따른 자전거 변화량을 시각화합니다.\n",
    "# 여기서 hue의 값을 dayofweek_order에 지정된 순서대로 출력하게 합니다.\n",
    "sns.pointplot(data=train, x=\"datetime-hour\", y=\"count\", hue=\"datetime-dayofweek\", hue_order=dayofweek_order)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q5-2) 이 시각화로 발견할 수 있는 사실은 어떤 게 있을까요? 그리고 앞서 우리의 예상과 어떤 차이가 있나요?\n",
    "\n",
    "확실히 주중/주말을 나누는 ```workingday``` 컬럼에 비해, 구체적인 요일을 나타내는 ```datetime-dayofweek``` 컬럼이 더 디테일한 자전거 변화량을 나타낸다는 사실을 알 수 있습니다. 구체적으로는\n",
    "\n",
    "1. 같은 주말이라고 하더라도 일요일이 토요일보다 자전거 대여량이 낮습니다. 이는 추측컨데 일요일은 다음 날이 근무일(월요일)이므로, 레크레이션이나 액티비티를 즐기고 싶다면 토요일에 즐기고 싶다는 사실이 드러난게 아닐까 생각합니다.\n",
    "1. 비슷한 관점에서, 같은 주중이라도 금요일이 퇴근하는 시간대(18시 ~ 20시)에 자전거 대여량이 다른 주중에 비해 낮습니다. 이는 추측컨데 다음 날이 휴일(토요일)이므로, 금요일 밤을 즐기기 위해 차를 몰고 왔거나, 음주 후 차량이나 자전거를 이용할 수 없어서 다른 대중교통(버스, 지하철, 택시 등)을 이용한게 아닐까 생각합니다.\n",
    "1. 또한 금요일은 같은 주중이라고 하더라도 오후 시간대(10시 ~ 16시)에 자전거 대여량이 높습니다. 그리고 그 다음 높은 주중이 월요일입니다. 이는 금요일과 월요일은 주중임에도 불구하고 주말과 끼여있는 요일이기 때문에, 주말의 성향을 어느정도 타는게 아닐까 생각합니다.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q5-3) 이 사실을 통해 어떻게 예측 모델을 개선할 수 있을까요? 최소 3가지 아이디어를 내보세요.\n",
    "\n",
    "1. 일단 요일(```datetime-dayofweek```) 컬럼을 머신러닝 모델에 집어넣으면, 머신러닝 모델이 요일에 따른 자전거 변화량의 차이를 이해하기 시작하면서 성능이 올라갈 것으로 예상합니다.\n",
    "2. 구체적으로는 같은 주말이라고 하더라도 토요일과 일요일의 차이, 같은 주중이라고 하더라도 수요일과 월요일의 차이를 이해하기 시작할 것입니다. 이런 점에서 근무일(```workingday```)컬럼만 넣는 것 보다 요일(```datetime-dayofweek```) 컬럼을 넣는 것이 더 좋은 성능을 낼 것입니다.\n",
    "3. 그리고 이 데이터는 연속적(continuous) 데이터가 아닌 범주형(categorical) 데이터입니다. 그 의미는, 이 데이터를 그대로 넣지 않고 타이타닉 경진대회의 선착장(```Embarked```) 컬럼과 같이 One Hot Encoding을 해서 넣어주는게 머신러닝 알고리즘이 이해하기 쉽고, 더 좋은 성능을 낼 것으로 예상합니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### casual & registered\n",
    "\n",
    "이번에 분석할 데이터는 비회원과 회원을 나타내는 데이터, ```casual```과 ```registered``` 컬럼입니다. 이 컬럼을 자전거 대여량을 나타내는 ```count``` 컬럼과 거의 유사합니다. (실제로 ```casual``` 컬럼값과 ```registered``` 컬럼값을 더하면 ```count``` 컬럼값이 나옵니다)\n",
    "\n",
    "하지만 아쉽게도 이 컬럼은 train 데이터에는 있지만 test 데이터에는 없습니다. 그러므로 이 데이터를 머신러닝 모델의 feature로 쓰는건 불가능합니다. 그렇다고 label로 쓰기에는, 우리가 맞춰야 하는 정답(=label)은 ```count``` 컬럼이죠. 하지만 그럼에도 불구하고, 이 두 개의 컬럼은 ```count``` 컬럼과 밀접한 연관이 있기 때문에, 잘 분석하고 이용한다면 머신러닝 모델의 성능을 크게 끌어올릴 수 있을 것 같습니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q6-1) ```casual```과 ```registered```  컬럼을 시각화 하기 전에 어떤 그림이 나올 것으로 예상하시나요?\n",
    "\n",
    "주의: 이 내용은 반드시 시각화를 하기 전에 작성하셔야 합니다. 그래야 시각화 결과와 본인의 아이디어를 비교해서 차이를 발견할 수 있습니다.\n",
    "\n",
    "1. 일단 두 개의 컬럼은 자전거 대여량을 나타내는 ```count``` 컬럼과 유사하므로, 시각화를 하면 거의 유사한 패턴이 나올 것으로 생각합니다.\n",
    "1. 하지만 두 회원간의 자전거 대여 성향이 다르기 때문에, 자전거를 대여하는 시기나 타이밍에 있어서 미묘하게 차이가 나지 않을까 합니다.\n",
    "1. 그리고 회원의 자전거 대여량에 해당하는 ```registered```에 비해, 비회원의 자전거 대여량에 해당하는 ```casual``` 컬럼이 더 패턴을 찾기 어려울 것입니다. (비회원이라는건 그만큼 비정기적으로 자전거를 대여하는 것이기 때문에) 이 점을 감안해서 분석하는게 좋을 것 같습니다.\n",
    "\n",
    "위 예상과 실제 데이터가 일치하는지 시각화를 통해 분석해보도록 하겠습니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### casual과 registered 컬럼 시각화하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x147ec16b908>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# matplotlib를 활용해 그래프의 사이즈를 가로로 길게(18) 늘리고, 세로로 짧게(4) 줄입니다.\n",
    "plt.figure(figsize = (18, 4))\n",
    "\n",
    "# seaborn의 pointplot으로 근무일 여부(workingday)와 시간(datetime-hour)에 따른 자전거 변화량을 시각화합니다.\n",
    "sns.pointplot(data=train, x=\"datetime-hour\", y=\"count\", hue=\"workingday\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x147edcb36a0>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# matplotlib를 활용해 그래프의 사이즈를 가로로 길게(18) 늘리고, 세로로 짧게(4) 줄입니다.\n",
    "plt.figure(figsize = (18, 4))\n",
    "\n",
    "# seaborn의 pointplot으로 근무일 여부(workingday)와 시간(datetime-hour)에 따른 비회원의 자전거 변화량(casual)을 시각화합니다.\n",
    "sns.pointplot(data=train, x=\"datetime-hour\", y=\"casual\", hue=\"workingday\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x147edfa41d0>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# matplotlib를 활용해 그래프의 사이즈를 가로로 길게(18) 늘리고, 세로로 짧게(4) 줄입니다.\n",
    "plt.figure(figsize = (18, 4))\n",
    "\n",
    "# seaborn의 pointplot으로 근무일 여부(workingday)와 시간(datetime-hour)에 따른 회원의 자전거 변화량(registered)을 시각화합니다.\n",
    "sns.pointplot(data=train, x=\"datetime-hour\", y=\"registered\", hue=\"workingday\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q6-2) 이 시각화로 발견할 수 있는 사실은 어떤 게 있을까요? 그리고 앞서 우리의 예상과 어떤 차이가 있나요?\n",
    "\n",
    "1. 시간(```datetime-hour```)에 따른 자전거 대여량의 변화량을 비교해보니, 비회원과 회원의 차이가 극명하게 난다는 사실을 알 수 있습니다.\n",
    "2. 구체적으로는, 회원(```registered```)은 주로 출퇴근할때 자전거를 빌리고, 비회원(```casual```)은 주로 주말에 놀 때 자전거를 빌린다는 사실을 알 수 있습니다.\n",
    "3. 그리고 시각화의 세로축(y축)을 보면 비회원(```casual```)보다는 회원(```registered```)이 자전거를 더 많이 빌린다는 사실을 알 수 있습니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q6-3) 이 사실을 통해 어떻게 예측 모델을 개선할 수 있을까요? 최소 3가지 아이디어를 내보세요.\n",
    "\n",
    "1. 일단 아쉽게도, 비회원(```casual```)과 회원(```registered```) 정보는 test 데이터에 넣을 수 없기 때문에 feature로 활용할 수 없습니다.\n",
    "2. 하지만 다른 방식을 통해서 유사하게 이 데이터를 쓸 수 있을 것 같습니다. 가령 머신러닝 모델로 자전거 대여량을 나타내는(```count```) 컬럼을 예측하는게 아닌, 비회원(```casual```)과 회원(```registered```) 컬럼을 각각 label로 간주하고 예측한 뒤 이를 더하는 것도 방법입니다.\n",
    "3. 내지는 비회원(```casual```) 컬럼의 값이 작고 패턴을 예측하기 어렵기 때문에, 비회원(```casual```), 회원(```registered```), 그리고 ```count``` 컬럼까지 총 3개를 동시에 예측해서 이를 섞어쓰는 것도 가능합니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### datetime-year & datetime-month"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "이번에 추가로 분석할 데이터는 연도와 월을 나타내는 데이터, ```datetime-year```와 ```datetime-month``` 컬럼입니다. 이 컬럼은 앞서 Q1)에서 분석한 적이 있지만, 이번 기회에 더 깊게 살펴보도록 하겠습니다 하겠습니다. 특히나 이 두 개의 컬럼에서 보고 싶은 것은 이 경진대회를 주최한 자전거 대여 스타트업 [Capital Bikeshare](https://www.capitalbikeshare.com/)의 트렌드입니다. 자전거 대여량의 트렌드가 상승하는지, 하강하는지를 살펴본 뒤 이를 머신러닝 알고리즘에 적용할 방법을 살펴보겠습니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q7-1) ```datetime-year```와 ```datetime-month```  컬럼을 시각화 하기 전에 어떤 그림이 나올 것으로 예상하시나요?\n",
    "\n",
    "주의: 이 내용은 반드시 시각화를 하기 전에 작성하셔야 합니다. 그래야 시각화 결과와 본인의 아이디어를 비교해서 차이를 발견할 수 있습니다.\n",
    "\n",
    "1. 여기서 연도(```datetime-year```)의 경우는 전반적인 트렌드가 상승하는지 하강하는지, 월(```datetime-month```)의 경우에는 트렌드와 더불어 계절(봄, 여름, 가을, 겨울)을 볼 수 있을 것입니다.\n",
    "1. 그리고 연도와 월을 따로 보는 것 보다, 붙여서 보는 것이 트렌드의 디테일함을 보는데 더 유리할 것 같습니다.\n",
    "\n",
    "위 예상과 실제 데이터가 일치하는지 시각화를 통해 분석해보도록 하겠습니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ```datetime-year```와 ```datetime-month``` 컬럼 시각화하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10886, 25)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>datetime</th>\n",
       "      <th>datetime-year_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-01-01 00:00:00</td>\n",
       "      <td>2011-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011-01-01 01:00:00</td>\n",
       "      <td>2011-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-01-01 02:00:00</td>\n",
       "      <td>2011-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-01-01 03:00:00</td>\n",
       "      <td>2011-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-01-01 04:00:00</td>\n",
       "      <td>2011-1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             datetime datetime-year_month\n",
       "0 2011-01-01 00:00:00              2011-1\n",
       "1 2011-01-01 01:00:00              2011-1\n",
       "2 2011-01-01 02:00:00              2011-1\n",
       "3 2011-01-01 03:00:00              2011-1\n",
       "4 2011-01-01 04:00:00              2011-1"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 연도(datetime-year)와 월(datetime-month)를 앞뒤로 붙인 datetime-year_month라는 이름의 컬럼을 추가합니다.\n",
    "# 이 컬럼에는 2011년 1월부터 2012년 12월까지 총 24개의 값이 들어가있습니다.\n",
    "train[\"datetime-year_month\"] = train[\"datetime-year\"].astype('str') + '-' + train[\"datetime-month\"].astype('str')\n",
    "\n",
    "# train 변수에 할당된 데이터의 행렬 사이즈를 출력합니다.\n",
    "# 출력은 (row, column) 으로 표시됩니다.\n",
    "print(train.shape)\n",
    "\n",
    "# head()로 train 데이터의 datetime과 datetime-year_month컬럼의 상위 5개를 띄웁니다.\n",
    "train[[\"datetime\", \"datetime-year_month\"]].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x147edf92860>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# matplotlib를 활용해 그래프의 사이즈를 가로로 길게(18) 늘리고, 세로로 짧게(4) 줄입니다.\n",
    "plt.figure(figsize = (18, 4))\n",
    "\n",
    "# seaborn의 barplot으로 2011년 1월부터 2012년 12월까지의 자젼거 대여량의 변화량을 시각화합니다.\n",
    "sns.barplot(data=train, x=\"datetime-year_month\", y=\"count\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q7-2) 이 시각화로 발견할 수 있는 사실은 어떤 게 있을까요? 그리고 앞서 우리의 예상과 어떤 차이가 있나요?\n",
    "\n",
    "1. 가장 처음 알 수 있는 것은, 이 회사가 전반적으로 성장하고 있다는 것입니다. (=자전거 대여량이 올라감) 2011년도 1월에 비해, 2012년도 12월에는 자전거 대여량이 현격하게 증가하는 것이 보입니다.\n",
    "2. 그리고 월(```datetime-month```)만 놓고 보면 얼핏 12월이 1월보다 자전거 대여량이 높아 보였지만, 연도와 월을 합쳐서 보니 12월이 1월보다 자전거 대여량이 높은 이유는 트렌드의 차이라는 것을 알 수 있습니다. 즉, 12월이라고 자전거를 1월보다 많이 빌려야 하는 특별한 이유는 보이지 않습니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q7-3) 이 사실을 통해 어떻게 예측 모델을 개선할 수 있을까요?\n",
    "\n",
    "1. 가장 큰 사실은, 머신러닝 모델이 이 트렌드를 파악하기 어렵다는 것입니다. 가령 머신러닝 모델 입장에서는 월(```datetime-month```)을 feature로 받았을 경우 단순히 \"12월이 1월보다 자전거 대여량이 높으니 12월일 경우는 자전거 대여량을 높게 예측해야겠다.\"라고 오해할 수도 있습니다.\n",
    "2. 그런 의미에서, 이 트렌드의 개념을 반영해줄 필요가 있습니다. 이는 여러가지 방법이 있는데, 1) 트렌드에 맞게 자전거 대여량(```count```)을 보정해주거나, 2) 2011년 1월부터 2012년 12월까지의 24개의 기간을 머신러닝 모델에 넣어주는(즉, 연과 월을 따로 넣지 않고 붙여서 함께 넣어주는) 방법이 있을 것으로 보입니다.\n",
    "3. 아니면 정 반대로, 이 트렌드를 이해하지 못하고 오해할 소지가 있다면 이를 사전에 배제해주는 것도 방법입니다. 이를 위한 가장 쉬운 방법은 월(```datetime-month```)을 feature에서 제거해주는 것입니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train\n",
    "\n",
    "이제 분석을 통해 발견한 인사이트를 활용해보겠습니다.\n",
    "\n",
    "이전 경진대회와 마찬가지로, 이번에도 머신러닝 알고리즘을 사용하겠습니다. 이번에도 변함없이 [지도학습(Supervised Learning)](http://solarisailab.com/archives/1785) 알고리즘을 사용할 계획이기 때문에, 데이터를 Label(맞춰야 하는 정답)과 Feature(Label을 맞추는데 도움이 되는 값들)로 나눌 필요가 있습니다.\n",
    "\n",
    "이번 경진대회에서는 다음의 컬럼들을 Feature와 Label로 활용할 것입니다.\n",
    "\n",
    "  * **Feature**: 1) 계절(```season```), 2) 공휴일(```holiday```), 3) 근무일(```workingday```), 4) 날씨(```weather```), 5) 온도(```temp```), 6) 체감 온도(```atemp```), 7) 습도(```humidity```), 8) 풍속(```windspeed```), 9) 연(```datetime-year```), 10) 시(```datetime-hour```), 11) 요일(```datetime-dayofweek(int)```) 입니다.\n",
    "  \n",
    "  * **Label**: 자전거 대여량(```count```)을 사용합니다.\n",
    "  \n",
    "이를 통해 train 데이터와 test 데이터를 다음의 세 가지 형태의 값으로 나눌 것입니다.\n",
    "\n",
    "  * **X_train**: train 데이터의 feature 입니다. 줄여서 X_train이라고 부릅니다.\n",
    "  * **X_test**: test 데이터의 feature 입니다. 마찬가지로 줄여서 X_test라고 부릅니다.\n",
    "  * **y_train**: train 데이터의 label 입니다. 마찬가지로 줄여서 y_train이라고 부릅니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['datetime', 'season', 'holiday', 'workingday', 'weather', 'temp',\n",
       "       'atemp', 'humidity', 'windspeed', 'casual', 'registered', 'count',\n",
       "       'datetime-year', 'datetime-month', 'datetime-day', 'datetime-hour',\n",
       "       'datetime-minute', 'datetime-second', 'datetime-dayofweek'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 연속형 feature와 범주형 feature\n",
    "# 범주형 feature의 type을 category로 변경 해 준다.\n",
    "categorical_feature_names = [\"season\",\"holiday\",\"workingday\",\"weather\",\n",
    "                             \"datetime-dayofweek\",\"datetime-month\",\"datetime-year\",\"datetime-hour\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "for var in categorical_feature_names:\n",
    "    train[var] = train[var].astype(\"category\")\n",
    "    test[var] = test[var].astype(\"category\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['season',\n",
       " 'weather',\n",
       " 'temp',\n",
       " 'atemp',\n",
       " 'humidity',\n",
       " 'datetime-year',\n",
       " 'datetime-hour',\n",
       " 'datetime-dayofweek',\n",
       " 'holiday',\n",
       " 'workingday']"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 총 11개의 컬럼을 feature를 지정합니다.\n",
    "# 이 11개의 컬럼명을 feature_names라는 이름의 파이썬 리스트(list)로 만들어 변수에 할당합니다.\n",
    "feature_names = [\"season\", \"weather\", \"temp\", \"atemp\", \"humidity\",\n",
    "                 \"datetime-year\", \"datetime-hour\", \"datetime-dayofweek\", \"holiday\", \"workingday\"\n",
    "                ]\n",
    "\n",
    "feature_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10886, 10)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>weather</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>humidity</th>\n",
       "      <th>datetime-year</th>\n",
       "      <th>datetime-hour</th>\n",
       "      <th>datetime-dayofweek</th>\n",
       "      <th>holiday</th>\n",
       "      <th>workingday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>81</td>\n",
       "      <td>2011</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9.02</td>\n",
       "      <td>13.635</td>\n",
       "      <td>80</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9.02</td>\n",
       "      <td>13.635</td>\n",
       "      <td>80</td>\n",
       "      <td>2011</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>75</td>\n",
       "      <td>2011</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9.84</td>\n",
       "      <td>14.395</td>\n",
       "      <td>75</td>\n",
       "      <td>2011</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  season weather  temp   atemp  humidity datetime-year datetime-hour  \\\n",
       "0      1       1  9.84  14.395        81          2011             0   \n",
       "1      1       1  9.02  13.635        80          2011             1   \n",
       "2      1       1  9.02  13.635        80          2011             2   \n",
       "3      1       1  9.84  14.395        75          2011             3   \n",
       "4      1       1  9.84  14.395        75          2011             4   \n",
       "\n",
       "  datetime-dayofweek holiday workingday  \n",
       "0                  5       0          0  \n",
       "1                  5       0          0  \n",
       "2                  5       0          0  \n",
       "3                  5       0          0  \n",
       "4                  5       0          0  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# feature_names를 활용해 train 데이터의 feature를 가져옵니다.\n",
    "# 이를 X_train이라는 이름의 변수에 할당합니다.\n",
    "X_train = train[feature_names]\n",
    "\n",
    "# X_train 변수에 할당된 데이터의 행렬 사이즈를 출력합니다.\n",
    "# 출력은 (row, column) 으로 표시됩니다.\n",
    "print(X_train.shape)\n",
    "\n",
    "# X_train 데이터의 상위 5개를 띄웁니다.\n",
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(6493, 10)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>weather</th>\n",
       "      <th>temp</th>\n",
       "      <th>atemp</th>\n",
       "      <th>humidity</th>\n",
       "      <th>datetime-year</th>\n",
       "      <th>datetime-hour</th>\n",
       "      <th>datetime-dayofweek</th>\n",
       "      <th>holiday</th>\n",
       "      <th>workingday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10.66</td>\n",
       "      <td>11.365</td>\n",
       "      <td>56</td>\n",
       "      <td>2011</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10.66</td>\n",
       "      <td>13.635</td>\n",
       "      <td>56</td>\n",
       "      <td>2011</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10.66</td>\n",
       "      <td>13.635</td>\n",
       "      <td>56</td>\n",
       "      <td>2011</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10.66</td>\n",
       "      <td>12.880</td>\n",
       "      <td>56</td>\n",
       "      <td>2011</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10.66</td>\n",
       "      <td>12.880</td>\n",
       "      <td>56</td>\n",
       "      <td>2011</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  season weather   temp   atemp  humidity datetime-year datetime-hour  \\\n",
       "0      1       1  10.66  11.365        56          2011             0   \n",
       "1      1       1  10.66  13.635        56          2011             1   \n",
       "2      1       1  10.66  13.635        56          2011             2   \n",
       "3      1       1  10.66  12.880        56          2011             3   \n",
       "4      1       1  10.66  12.880        56          2011             4   \n",
       "\n",
       "  datetime-dayofweek holiday workingday  \n",
       "0                  3       0          1  \n",
       "1                  3       0          1  \n",
       "2                  3       0          1  \n",
       "3                  3       0          1  \n",
       "4                  3       0          1  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# feature_names를 활용해 test 데이터의 feature를 가져옵니다.\n",
    "# 이를 X_test라는 이름의 변수에 할당합니다.\n",
    "X_test = test[feature_names]\n",
    "\n",
    "# X_test 변수에 할당된 데이터의 행렬 사이즈를 출력합니다.\n",
    "# 출력은 (row, column) 으로 표시됩니다.\n",
    "print(X_test.shape)\n",
    "\n",
    "# X_test 데이터의 상위 5개를 띄웁니다.\n",
    "X_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10886,)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0    16\n",
       "1    40\n",
       "2    32\n",
       "3    13\n",
       "4     1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# train 데이터의 첫 번째 label에 해당하는 자전거 대여량(count)을 가져옵니다.\n",
    "# 이를 y_train_count이라는 이름의 변수에 할당합니다.\n",
    "y_train_count = train[\"count\"]\n",
    "\n",
    "# y_train_count 변수에 할당된 데이터의 사이즈를 출력합니다.\n",
    "# 출력은 (row, column) 으로 표시되나, column이 없기 때문에 (row,) 형태로 표시될 것입니다.\n",
    "print(y_train_count.shape)\n",
    "\n",
    "# y_train_count 데이터의 상위 5개를 띄웁니다.\n",
    "y_train_count.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10886,)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0    2.833213\n",
       "1    3.713572\n",
       "2    3.496508\n",
       "3    2.639057\n",
       "4    0.693147\n",
       "Name: count, dtype: float64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 파이썬의 선형대수 패키지인 Numpy를 가져옵니다.\n",
    "# 이를 줄여서 np라는 축약어로 사용합니다.\n",
    "import numpy as np\n",
    "\n",
    "# y_train_count에 log + 1 연산을 합니다.\n",
    "# 이를 y_train_log_count라는 이름의 변수에 할당합니다.\n",
    "y_train_log_count = np.log(y_train_count + 1)\n",
    "\n",
    "# y_train_log_count 변수에 할당된 데이터의 사이즈를 출력합니다.\n",
    "# 출력은 (row, column) 으로 표시되나, column이 없기 때문에 (row,) 형태로 표시될 것입니다.\n",
    "print(y_train_log_count.shape)\n",
    "\n",
    "# y_train_log_count 데이터의 상위 5개를 띄웁니다.\n",
    "y_train_log_count.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10886,)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0    3\n",
       "1    8\n",
       "2    5\n",
       "3    3\n",
       "4    0\n",
       "Name: casual, dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# train 데이터의 두 번째 label에 해당하는 비회원의 자전거 대여량(casual)을 가져옵니다.\n",
    "# 이를 y_train_casual이라는 이름의 변수에 할당합니다.\n",
    "y_train_casual = train[\"casual\"]\n",
    "\n",
    "# y_train_casual 변수에 할당된 데이터의 사이즈를 출력합니다.\n",
    "# 출력은 (row, column) 으로 표시되나, column이 없기 때문에 (row,) 형태로 표시될 것입니다.\n",
    "print(y_train_casual.shape)\n",
    "\n",
    "# y_train_casual 데이터의 상위 5개를 띄웁니다.\n",
    "y_train_casual.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10886,)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0    1.386294\n",
       "1    2.197225\n",
       "2    1.791759\n",
       "3    1.386294\n",
       "4    0.000000\n",
       "Name: casual, dtype: float64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# y_train_casual에 log + 1 연산을 합니다.\n",
    "# 이를 y_train_log_casual라는 이름의 변수에 할당합니다.\n",
    "y_train_log_casual = np.log(y_train_casual + 1)\n",
    "\n",
    "# y_train_log_casual 변수에 할당된 데이터의 사이즈를 출력합니다.\n",
    "# 출력은 (row, column) 으로 표시되나, column이 없기 때문에 (row,) 형태로 표시될 것입니다.\n",
    "print(y_train_log_casual.shape)\n",
    "\n",
    "# y_train_log_casual 데이터의 상위 5개를 띄웁니다.\n",
    "y_train_log_casual.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10886,)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0    13\n",
       "1    32\n",
       "2    27\n",
       "3    10\n",
       "4     1\n",
       "Name: registered, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# train 데이터의 세 번째 label에 해당하는 회원의 자전거 대여량(registered)을 가져옵니다.\n",
    "# 이를 y_train_registered이라는 이름의 변수에 할당합니다.\n",
    "y_train_registered = train[\"registered\"]\n",
    "\n",
    "# y_train_registered 변수에 할당된 데이터의 사이즈를 출력합니다.\n",
    "# 출력은 (row, column) 으로 표시되나, column이 없기 때문에 (row,) 형태로 표시될 것입니다.\n",
    "print(y_train_registered.shape)\n",
    "\n",
    "# y_train_registered 데이터의 상위 5개를 띄웁니다.\n",
    "y_train_registered.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10886,)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0    2.639057\n",
       "1    3.496508\n",
       "2    3.332205\n",
       "3    2.397895\n",
       "4    0.693147\n",
       "Name: registered, dtype: float64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# y_train_registered에 log + 1 연산을 합니다.\n",
    "# 이를 y_train_log_registered라는 이름의 변수에 할당합니다.\n",
    "y_train_log_registered = np.log(y_train_registered + 1)\n",
    "\n",
    "# y_train_log_registered 변수에 할당된 데이터의 사이즈를 출력합니다.\n",
    "# 출력은 (row, column) 으로 표시되나, column이 없기 때문에 (row,) 형태로 표시될 것입니다.\n",
    "print(y_train_log_registered.shape)\n",
    "\n",
    "# y_train_log_registered 데이터의 상위 5개를 띄웁니다.\n",
    "y_train_log_registered.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Use Random Forest\n",
    "\n",
    "X_train, X_test, y_train 데이터를 만들었으면, 이제 이 데이터를 활용하여 머신러닝 알고리즘을 학습시켜 보겠습니다.\n",
    "\n",
    "이번에 사용할 알고리즘은 랜덤 포레스트(Random Forest)입니다. 랜덤 포레스트는 의사결정나무(Decision Tree)의 업그레이드 버전이라고 볼 수 있는데, 대부분의 경우 의사결정나무보다 더 좋은 성능을 보장합니다. 알고리즘의 동작 원리는 다음과 같습니다.\n",
    "\n",
    "  1. 먼저 전체 데이터가 아니라, 데이터의 일부분을 랜덤하게 가져옵니다. 이를 랜덤 샘플링, 또는 베깅([bootstrap aggregating](https://en.wikipedia.org/wiki/Bootstrap_aggregating))이라고 합니다. 이렇게 랜덤 샘플링한 데이터로 의사결정나무(Decision Tree)를 하나 만듭니다.\n",
    "  2. 1번의 방식을 사용하면 이론적으로 무제한의 다양한 트리를 만들 수 있습니다. 이 트리를 지정한 갯수만큼 생성합니다.\n",
    "  3. 생성한 트리끼리 투표를 합니다. 가령 타이타닉 승객 데이터를 제공했을 때, 1,000개의 트리 중 700개가 생존/300개가 사망했다고 하면 해당 승객은 생존했다고 가정합니다. 정 반대로 400개가 생존/600개가 사망했다고 하면 해당 승객은 사망했다고 가정합니다.\n",
    "  \n",
    "이러한 방식을 거치면 의사결정나무(Decision Tree)보다 더 강력한 알고리즘을 구현할 수 있습니다. (자세한 설명은 [다음의 링크](http://swalloow.tistory.com/92)를 참고 바랍니다)\n",
    "\n",
    "그런 의미에서, 이번에도 파이썬의 머신러닝 패키지인 [scikit-learn](scikit-learn.org)에서 랜덤 포레스트([RandomForestRegressor](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html))를 가져오겠습니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=97.0,\n",
       "                      max_features=0.897703, max_leaf_nodes=None,\n",
       "                      min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                      min_samples_leaf=1, min_samples_split=2,\n",
       "                      min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=-1,\n",
       "                      oob_score=False, random_state=37, verbose=0,\n",
       "                      warm_start=False)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# scikit-learn 패키지의 ensemble 모듈에 있는 RandomForestRegressor를 가지고 옵니다.\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "# RandomForestRegressor를 생성합니다. 실행할 때는 다음의 옵션이 들어갑니다.\n",
    "# 1) n_estimators. 트리의 개수입니다. 10을 넣으면 10개의 트리를 생성합니다.\n",
    "# 2) n_jobs. 병렬처리 여부입니다. -1을 대입하면 컴퓨터에 존재하는 모든 코어(Core, ex: 듀얼코어, 쿼드코어)를 전부 활용합니다.\n",
    "# 3) random_state. 랜덤포레스트의 결과가 랜덤하게 나오는 것을 고정하는 옵션입니다. 아무 숫자나 넣어주면 됩니다. (공학 용어에서 쓰이는 Seed Number와 동일한 개념입니다)\n",
    "model2 = RandomForestRegressor(n_estimators=100,\n",
    "                              max_depth=97.0,\n",
    "                               max_features=0.897703,\n",
    "                              n_jobs=-1,\n",
    "                              random_state=37)\n",
    "model2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train = train['count']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10886,)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([ 28.1  ,  23.73 ,  19.945, ..., 198.67 , 169.26 , 138.15 ])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_predict\n",
    "\n",
    "y_predict2 = cross_val_predict(model2, X_train, y_train, cv = 20)\n",
    "\n",
    "print(y_predict2.shape)\n",
    "y_predict2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.37660628397610224"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "\n",
    "##score = abs(y_train - y_predict).mean()\n",
    "\n",
    "score3 = mean_squared_log_error(y_train, y_predict2)\n",
    "score3 = np.sqrt(score3)\n",
    "\n",
    "score3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hyperparameter Tuning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "랜덤 포레스트(Random Forest)를 사용하기로 마음 먹었으면, 이번에는 이 랜덤포레스트의 하이퍼패러미터를 튜닝해보겠습니다.\n",
    "\n",
    "머신러닝 모델에는 다양한 옵션이 있으며, 이 옵션을 통해 모델의 성능을 끌어올릴 수 있습니다. 이 옵션들을 전문용어로 하이퍼패러미터(Hyperparameter)라고 부릅니다. 만일 적절한 하이퍼패러미터를 찾아서 모델에 적용할 수 있다면 모델의 성능을 한 층 더 끌어올릴 수 있습니다. 이를 **하이퍼패러미터 튜닝(Hyperparamter Tuning)**이라고 합니다.\n",
    "\n",
    "어떻게 하면 가장 좋은 하이퍼패러미터를 찾을 수 있을까요? 답은 간단합니다. 이론상으로 존재 가능한 모든 하이퍼패러미터 범위에서 랜덤하게 찾아서 Cross Validation을 해보면 됩니다. 이 방식을 랜덤 서치(Random Search)라고 합니다.\n",
    "\n",
    "<img src=\"http://cs231n.github.io/assets/nn3/gridsearchbad.jpeg\" alt=\"Random Search for Hyper-Parameter Optimization\" style=\"width: 360px;\"/>\n",
    "\n",
    "<p style=\"text-align: center;\">\n",
    "  <small>\n",
    "    위 그림과 같이, Grid Search를 활용하면 가장 좋은 성능을 내는 하이퍼패러미터를 찾기 어렵습니다. 이런 경우는 Random Search를 사용합니다.\n",
    "  </small>\n",
    "</p>\n",
    "<p style=\"text-align: center;\">\n",
    "  <small>\n",
    "    (see <a href=\"http://www.jmlr.org/papers/volume13/bergstra12a/bergstra12a.pdf\">Random Search for Hyper-Parameter Optimization</a>)\n",
    "  </small>\n",
    "</p>\n",
    "\n",
    "하지만 랜덤 서치(Random Search)는 현실적으로 시간이 오래 걸리기 때문에, 랜덤 서치(Random Search)를 응용한 다른 하이퍼패러미터 튜닝 방식을 사용하겠습니다. 바로 **Coarse & Fine Search** 입니다.\n",
    "\n",
    "Coarse & Fine Search는 크게 1) Coarse Search와 2) Fine Search로 동작합니다\n",
    "\n",
    "먼저 **Coarse Search**에서는 Random Search를 하되, 이론상으로 존재 가능한 모든 하이퍼패러미터 범위를 집어넣습니다. 이렇게 Random Search를 하면 가장 좋은 하이퍼패러미터를 찾는 것은 어렵지만, **좋지 않은 하이퍼패러미터를 정렬해서 후순위로 놓을 수 있습니다.**\n",
    "\n",
    "이를 통해 좋지 않은 하이퍼패러미터를 버린 뒤 다시 한 번 Random Search를 하는 것을 **Fine Search**라고 합니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Random Search(Coarse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 0 n_estimators = 300, max_depth = 32, max_features = 0.969911, Score = 0.35001\n",
      " 1 n_estimators = 300, max_depth = 76, max_features = 0.177249, Score = 0.58466\n",
      " 2 n_estimators = 300, max_depth = 42, max_features = 0.364410, Score = 0.38581\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-42-74d656ae026e>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     56\u001b[0m     \u001b[0my_predict_log_casual\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcross_val_predict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train_log_casual\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcv\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m20\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     57\u001b[0m     \u001b[0my_predict_log_registered\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcross_val_predict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train_log_registered\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcv\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m20\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 58\u001b[1;33m     \u001b[0my_predict_log_count\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcross_val_predict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train_log_count\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcv\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m20\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     59\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     60\u001b[0m     \u001b[1;31m# 위 Cross Validation을 통해 얻은 예측값을, exp - 1 연산을 함으로서\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\u001b[0m in \u001b[0;36mcross_val_predict\u001b[1;34m(estimator, X, y, groups, cv, n_jobs, verbose, fit_params, pre_dispatch, method)\u001b[0m\n\u001b[0;32m    778\u001b[0m     prediction_blocks = parallel(delayed(_fit_and_predict)(\n\u001b[0;32m    779\u001b[0m         clone(estimator), X, y, train, test, verbose, fit_params, method)\n\u001b[1;32m--> 780\u001b[1;33m         for train, test in cv.split(X, y, groups))\n\u001b[0m\u001b[0;32m    781\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    782\u001b[0m     \u001b[1;31m# Concatenate the predictions\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\joblib\\parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, iterable)\u001b[0m\n\u001b[0;32m    922\u001b[0m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_original_iterator\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    923\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 924\u001b[1;33m             \u001b[1;32mwhile\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    925\u001b[0m                 \u001b[1;32mpass\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    926\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\joblib\\parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[1;34m(self, iterator)\u001b[0m\n\u001b[0;32m    757\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[1;32mFalse\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    758\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 759\u001b[1;33m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    760\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    761\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\joblib\\parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[1;34m(self, batch)\u001b[0m\n\u001b[0;32m    714\u001b[0m         \u001b[1;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    715\u001b[0m             \u001b[0mjob_idx\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 716\u001b[1;33m             \u001b[0mjob\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    717\u001b[0m             \u001b[1;31m# A job can complete so quickly than its callback is\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    718\u001b[0m             \u001b[1;31m# called before we get here, causing self._jobs to\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\joblib\\_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[1;34m(self, func, callback)\u001b[0m\n\u001b[0;32m    180\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    181\u001b[0m         \u001b[1;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 182\u001b[1;33m         \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    183\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    184\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\joblib\\_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, batch)\u001b[0m\n\u001b[0;32m    547\u001b[0m         \u001b[1;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    548\u001b[0m         \u001b[1;31m# arguments in memory\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 549\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    550\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    551\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\joblib\\parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    223\u001b[0m         \u001b[1;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    224\u001b[0m             return [func(*args, **kwargs)\n\u001b[1;32m--> 225\u001b[1;33m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[0;32m    226\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    227\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\joblib\\parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[1;34m(.0)\u001b[0m\n\u001b[0;32m    223\u001b[0m         \u001b[1;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    224\u001b[0m             return [func(*args, **kwargs)\n\u001b[1;32m--> 225\u001b[1;33m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[0;32m    226\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    227\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_validation.py\u001b[0m in \u001b[0;36m_fit_and_predict\u001b[1;34m(estimator, X, y, train, test, verbose, fit_params, method)\u001b[0m\n\u001b[0;32m    865\u001b[0m         \u001b[0mestimator\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    866\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 867\u001b[1;33m         \u001b[0mestimator\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    868\u001b[0m     \u001b[0mfunc\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    869\u001b[0m     \u001b[0mpredictions\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\forest.py\u001b[0m in \u001b[0;36mfit\u001b[1;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[0;32m    328\u001b[0m                     \u001b[0mt\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mX\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mi\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtrees\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    329\u001b[0m                     verbose=self.verbose, class_weight=self.class_weight)\n\u001b[1;32m--> 330\u001b[1;33m                 for i, t in enumerate(trees))\n\u001b[0m\u001b[0;32m    331\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    332\u001b[0m             \u001b[1;31m# Collect newly grown trees\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\joblib\\parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, iterable)\u001b[0m\n\u001b[0;32m    932\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    933\u001b[0m             \u001b[1;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mretrieval_context\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 934\u001b[1;33m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mretrieve\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    935\u001b[0m             \u001b[1;31m# Make sure that we get a last message telling us we are done\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    936\u001b[0m             \u001b[0melapsed_time\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtime\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtime\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m-\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_start_time\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\joblib\\parallel.py\u001b[0m in \u001b[0;36mretrieve\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    831\u001b[0m             \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    832\u001b[0m                 \u001b[1;32mif\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'supports_timeout'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;32mFalse\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 833\u001b[1;33m                     \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    834\u001b[0m                 \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    835\u001b[0m                     \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_output\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mjob\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\joblib\\_parallel_backends.py\u001b[0m in \u001b[0;36mwrap_future_result\u001b[1;34m(future, timeout)\u001b[0m\n\u001b[0;32m    519\u001b[0m         AsyncResults.get from multiprocessing.\"\"\"\n\u001b[0;32m    520\u001b[0m         \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 521\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mfuture\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mresult\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    522\u001b[0m         \u001b[1;32mexcept\u001b[0m \u001b[0mLokyTimeoutError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    523\u001b[0m             \u001b[1;32mraise\u001b[0m \u001b[0mTimeoutError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\concurrent\\futures\\_base.py\u001b[0m in \u001b[0;36mresult\u001b[1;34m(self, timeout)\u001b[0m\n\u001b[0;32m    425\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__get_result\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    426\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 427\u001b[1;33m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_condition\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwait\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    428\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    429\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_state\u001b[0m \u001b[1;32min\u001b[0m \u001b[1;33m[\u001b[0m\u001b[0mCANCELLED\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mCANCELLED_AND_NOTIFIED\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\threading.py\u001b[0m in \u001b[0;36mwait\u001b[1;34m(self, timeout)\u001b[0m\n\u001b[0;32m    294\u001b[0m         \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m    \u001b[1;31m# restore state no matter what (e.g., KeyboardInterrupt)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    295\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mtimeout\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 296\u001b[1;33m                 \u001b[0mwaiter\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0macquire\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    297\u001b[0m                 \u001b[0mgotit\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mTrue\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    298\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "# 파이썬의 선형대수 패키지인 Numpy를 가져옵니다.\n",
    "# 이를 줄여서 np라는 축약어로 사용합니다.\n",
    "import numpy as np\n",
    "\n",
    "# scikit-learn 패키지의 ensemble 모듈에 있는 RandomForestRegressor를 가지고 옵니다.\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "# scikit-learn 패키지의 model_selection 모듈에 있는 cross_val_predict 함수를 가지고 옵니다.\n",
    "from sklearn.model_selection import cross_val_predict\n",
    "\n",
    "# scikit-learn의 metrics 모듈에서 mean_squared_log_error라는 이름의 함수를 가져옵니다.\n",
    "# 이 함수는 앞서 설명한 RMSLE에서 R(Root)를 제외한 나머지 부분을 계산해줍니다.\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "\n",
    "# n_estimators는 트리의 갯수입니다.\n",
    "# 보통은 높을수록 좋지만, 그만큼 실행 속도가 오래 걸리기 때문에 이번에는 적당한 값을 주겠습니다. (300 개)\n",
    "# 나머지 하이퍼패리미터가 전부 튜닝되면, 그 다음에는 n_estimators를 최대한 높이 주면 됩니다. (ex: 1,000 개)\n",
    "n_estimators = 300\n",
    "\n",
    "# 랜덤 서치를 반복할 횟수입니다.\n",
    "# 보통 100번을 반복합니다.\n",
    "num_epoch = 100\n",
    "\n",
    "# hyperparameter 탐색 결과를 리스트로 저장합니다.\n",
    "coarse_hyperparameters_list = []\n",
    "\n",
    "# num_epoch 횟수만큼 랜덤 서치를 반복합니다.\n",
    "for epoch in range(num_epoch):\n",
    "    # 2에서 100 사이의 정수형(int) 값을 랜덤하게 생성하여 max_depth 변수에 할당합니다.\n",
    "    max_depth = np.random.randint(low = 2, high = 100)\n",
    "\n",
    "    # 0.1에서 1.0 사이의 실수형(float) 값을 랜덤하게 생성하여  max_features 변수에 할당합니다.\n",
    "    max_features = np.random.uniform(low = 0.1, high = 1.0)\n",
    "\n",
    "    # Random Forest를 생성합니다. 옵션은 다음과 같습니다.\n",
    "    # 1) n_estimators. 트리의 갯수입니다.\n",
    "    # 2) max_depth. 트리의 깊이입니다. 지정한 숫자만큼 트리가 깊게 가지를 뻗습니다.\n",
    "    # 3) max_features. Feature Sampling입니다. 0.0 ~ 1.0 사이의 값을 넣으면, 트리를 생성할 때 전체 feature에서 지정한 비율만큼만 feature를 사용합니다.\n",
    "    # 4) n_jobs. 병렬처리 여부입니다. -1을 대입하면 컴퓨터에 존재하는 모든 코어(Core, ex: 듀얼코어, 쿼드코어)를 전부 활용합니다.\n",
    "    # 5) random_state. 랜덤포레스트의 결과가 랜덤하게 나오는 것을 고정하는 옵션입니다. 아무 숫자나 넣어주면 됩니다. (공학 용어에서 쓰이는 Seed Number와 동일한 개념입니다)\n",
    "    model = RandomForestRegressor(n_estimators = n_estimators,\n",
    "                                  max_depth = max_depth,\n",
    "                                  max_features = max_features,\n",
    "                                  n_jobs = -1,\n",
    "                                  random_state = 37)\n",
    "\n",
    "    # 주어진 모델(랜덤포레스트)를 활용하여 Cross Validation을 합니다.\n",
    "    # Cross Validation을 할 때는 cross_val_predict라는 함수를 사용하며, 이 함수에는 다음의 옵션이 들어갑니다.\n",
    "    # 1) model. 점수를 측정할 머신러닝 모델(현재는 Random Forest)이 들어갑니다.\n",
    "    # 2) X_train. train 데이터의 feature 입니다.\n",
    "    # 3) y_train. train 데이터의 label 입니다.\n",
    "    # 4) cv. Cross Validation에서 데이터를 조각낼(split) 갯수입니다. 총 20조각을 내야하기 때문에 20을 대입합니다.\n",
    "    # 단, 이 Cross Validation을 할 때는 count 컬럼 하나를 사용하는게 아니라,\n",
    "    # count, casual, registered 컬럼 세 개를 따로 예측합니다.\n",
    "    # 또한 count, casual, registered 세 개를 그냥 사용하지 않고, log + 1 연산을 한 결과를 사용합니다.\n",
    "    y_predict_log_casual = cross_val_predict(model, X_train, y_train_log_casual, cv = 20)\n",
    "    y_predict_log_registered = cross_val_predict(model, X_train, y_train_log_registered, cv = 20)\n",
    "    y_predict_log_count = cross_val_predict(model, X_train, y_train_log_count, cv = 20)\n",
    "\n",
    "    # 위 Cross Validation을 통해 얻은 예측값을, exp - 1 연산을 함으로서\n",
    "    # 다시 원래 자전거 대여량으로 변환시킵니다.\n",
    "    y_predict_casual = np.exp(y_predict_log_casual) - 1\n",
    "    y_predict_registered = np.exp(y_predict_log_registered) - 1\n",
    "    y_predict_count = np.exp(y_predict_log_count) - 1\n",
    "\n",
    "    # 이 결과를 기하평균을 통해 하나로 합칩니다.\n",
    "    # 이렇게 하면 결과적으로 train 데이터의 자전거 대여량의 예측값이 나옵니다.\n",
    "    # 이 예측값을 y_predict라는 변수에 할당합니다.\n",
    "    y_predict = np.sqrt((y_predict_casual + y_predict_registered) * y_predict_count)\n",
    "\n",
    "    # train 데이터의 label에 해당하는 y_train과, train 데이터의 label의 예측값인 y_predict를 활용하여\n",
    "    # Mean Squared Logarithmic Error(MSLE)를 계산합니다.\n",
    "    # 이후 여기에 numpy의 sqrt(square root)를 활용하여 루트 연산을 합니다.\n",
    "    # 이 결과가 사실상 Root Mean Squared Logarithmic Error(RMSLE)가 됩니다.\n",
    "    # 이를 score라는 이름의 변수에 할당합니다.\n",
    "    score = mean_squared_log_error(y_train_count, y_predict)\n",
    "    score = np.sqrt(score)\n",
    "    \n",
    "    # hyperparameter 탐색 결과를 딕셔너리화 합니다.\n",
    "    hyperparameters = {\n",
    "        'epoch': epoch,\n",
    "        'score': score,\n",
    "        'n_estimators': n_estimators,\n",
    "        'max_depth': max_depth,\n",
    "        'max_features': max_features,\n",
    "    }\n",
    "\n",
    "    # hyperparameter 탐색 결과를 리스트에 저장합니다.\n",
    "    coarse_hyperparameters_list.append(hyperparameters)\n",
    "\n",
    "    # hyperparameter 탐색 결과를 출력합니다.\n",
    "    print(f\"{epoch:2} n_estimators = {n_estimators}, max_depth = {max_depth:2}, max_features = {max_features:.6f}, Score = {score:.5f}\")\n",
    "\n",
    "# coarse_hyperparameters_list를 Pandas의 DataFrame으로 변환합니다.\n",
    "coarse_hyperparameters_list = pd.DataFrame.from_dict(coarse_hyperparameters_list)\n",
    "\n",
    "# 변환한 coarse_hyperparameters_list를 score가 낮은 순으로 정렬합니다.\n",
    "# (RMSE는 score가 낮을 수록 더 정확도가 높다고 가정합니다)\n",
    "coarse_hyperparameters_list = coarse_hyperparameters_list.sort_values(by=\"score\")\n",
    "\n",
    "# coarse_hyperparameters_list 변수에 할당된 데이터의 행렬 사이즈를 출력합니다.\n",
    "# 출력은 (row, column) 으로 표시됩니다.\n",
    "print(coarse_hyperparameters_list.shape)\n",
    "\n",
    "# coarse_hyperparameters_list의 상위 10개를 출력합니다.\n",
    "coarse_hyperparameters_list.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Coarse Search가 끝났으면, 상위 5 ~ 10개의 결과만 출력한 뒤 이 결과를 낸 하이퍼패러미터 범위만 남겨놓고 다시 한 번 Random Search를 합니다. 이를 Fine Search라고 합니다.\n",
    "\n",
    "가령 위 Coarse Search를 통해, 다음의 하이퍼패러미터가 상위 5 ~ 10개 안에 들었다고 가정하겠습니다.\n",
    "\n",
    "  * max_depth = 40개 ~ 100개\n",
    "  * max_features = 0.7 ~ 1.0\n",
    "  \n",
    "이제 위 코드를 그대로 사용하되, 다음의 부분만 수정한 뒤 다시 한 번 Random Search를 하겠습니다.\n",
    "\n",
    "```\n",
    "# 40에서 100 사이의 정수형(int) 값을 랜덤하게 생성하여 max_depth 변수에 할당합니다.\n",
    "max_depth = np.random.randint(low=40, high=100)\n",
    "\n",
    "# 0.6에서 1.0 사이의 실수형(float) 값을 랜덤하게 생성하여  max_features 변수에 할당합니다.\n",
    "max_features = np.random.uniform(low=0.7, high=1.0) \n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Random Search(Fine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 파이썬의 선형대수 패키지인 Numpy를 가져옵니다.\n",
    "# 이를 줄여서 np라는 축약어로 사용합니다.\n",
    "import numpy as np\n",
    "\n",
    "# scikit-learn 패키지의 ensemble 모듈에 있는 RandomForestRegressor를 가지고 옵니다.\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "# scikit-learn 패키지의 model_selection 모듈에 있는 cross_val_predict 함수를 가지고 옵니다.\n",
    "from sklearn.model_selection import cross_val_predict\n",
    "\n",
    "# scikit-learn의 metrics 모듈에서 mean_squared_log_error라는 이름의 함수를 가져옵니다.\n",
    "# 이 함수는 앞서 설명한 RMSLE에서 R(Root)를 제외한 나머지 부분을 계산해줍니다.\n",
    "from sklearn.metrics import mean_squared_log_error\n",
    "\n",
    "# n_estimators는 트리의 갯수입니다.\n",
    "# 보통은 높을수록 좋지만, 그만큼 실행 속도가 오래 걸리기 때문에 이번에는 적당한 값을 주겠습니다. (300 개)\n",
    "# 나머지 하이퍼패리미터가 전부 튜닝되면, 그 다음에는 n_estimators를 최대한 높이 주면 됩니다. (ex: 1,000 개)\n",
    "n_estimators = 300\n",
    "\n",
    "# 랜덤 서치를 반복할 횟수입니다.\n",
    "# 보통 100번을 반복합니다.\n",
    "num_epoch = 100\n",
    "\n",
    "# hyperparameter 탐색 결과를 리스트로 저장합니다.\n",
    "fine_hyperparameters_list = []\n",
    "\n",
    "# num_epoch 횟수만큼 랜덤 서치를 반복합니다.\n",
    "for epoch in range(num_epoch):\n",
    "    # 40에서 100 사이의 정수형(int) 값을 랜덤하게 생성하여 max_depth 변수에 할당합니다.\n",
    "    max_depth = np.random.randint(low = 40, high = 100)\n",
    "\n",
    "    # 0.6에서 1.0 사이의 실수형(float) 값을 랜덤하게 생성하여  max_features 변수에 할당합니다.\n",
    "    max_features = np.random.uniform(low = 0.8, high = 1.0)\n",
    "\n",
    "    # Random Forest를 생성합니다. 옵션은 다음과 같습니다.\n",
    "    # 1) n_estimators. 트리의 갯수입니다.\n",
    "    # 2) max_depth. 트리의 깊이입니다. 지정한 숫자만큼 트리가 깊게 가지를 뻗습니다.\n",
    "    # 3) max_features. Feature Sampling입니다. 0.0 ~ 1.0 사이의 값을 넣으면, 트리를 생성할 때 전체 feature에서 지정한 비율만큼만 feature를 사용합니다.\n",
    "    # 4) n_jobs. 병렬처리 여부입니다. -1을 대입하면 컴퓨터에 존재하는 모든 코어(Core, ex: 듀얼코어, 쿼드코어)를 전부 활용합니다.\n",
    "    # 5) random_state. 랜덤포레스트의 결과가 랜덤하게 나오는 것을 고정하는 옵션입니다. 아무 숫자나 넣어주면 됩니다. (공학 용어에서 쓰이는 Seed Number와 동일한 개념입니다)\n",
    "    model = RandomForestRegressor(n_estimators = n_estimators,\n",
    "                                  max_depth = max_depth,\n",
    "                                  max_features = max_features,\n",
    "                                  n_jobs = -1,\n",
    "                                  random_state = 37)\n",
    "\n",
    "    # 주어진 모델(랜덤포레스트)를 활용하여 Cross Validation을 합니다.\n",
    "    # Cross Validation을 할 때는 cross_val_predict라는 함수를 사용하며, 이 함수에는 다음의 옵션이 들어갑니다.\n",
    "    # 1) model. 점수를 측정할 머신러닝 모델(현재는 Random Forest)이 들어갑니다.\n",
    "    # 2) X_train. train 데이터의 feature 입니다.\n",
    "    # 3) y_train. train 데이터의 label 입니다.\n",
    "    # 4) cv. Cross Validation에서 데이터를 조각낼(split) 갯수입니다. 총 20조각을 내야하기 때문에 20을 대입합니다.\n",
    "    # 단, 이 Cross Validation을 할 때는 count 컬럼 하나를 사용하는게 아니라,\n",
    "    # count, casual, registered 컬럼 세 개를 따로 예측합니다.\n",
    "    # 또한 count, casual, registered 세 개를 그냥 사용하지 않고, log + 1 연산을 한 결과를 사용합니다.\n",
    "    y_predict_log_casual = cross_val_predict(model, X_train, y_train_log_casual, cv = 20)\n",
    "    y_predict_log_registered = cross_val_predict(model, X_train, y_train_log_registered, cv = 20)\n",
    "    y_predict_log_count = cross_val_predict(model, X_train, y_train_log_count, cv = 20)\n",
    "\n",
    "    # 위 Cross Validation을 통해 얻은 예측값을, exp - 1 연산을 함으로서\n",
    "    # 다시 원래 자전거 대여량으로 변환시킵니다.\n",
    "    y_predict_casual = np.exp(y_predict_log_casual) - 1\n",
    "    y_predict_registered = np.exp(y_predict_log_registered) - 1\n",
    "    y_predict_count = np.exp(y_predict_log_count) - 1\n",
    "\n",
    "    # 이 결과를 기하평균을 통해 하나로 합칩니다.\n",
    "    # 이렇게 하면 결과적으로 train 데이터의 자전거 대여량의 예측값이 나옵니다.\n",
    "    # 이 예측값을 y_predict라는 변수에 할당합니다.\n",
    "    y_predict = np.sqrt((y_predict_casual + y_predict_registered) * y_predict_count)\n",
    "    \n",
    "    # hyperparameter 탐색 결과를 딕셔너리화 합니다.\n",
    "    hyperparameters = {\n",
    "        'epoch': epoch,\n",
    "        'score': score,\n",
    "        'n_estimators': n_estimators,\n",
    "        'max_depth': max_depth,\n",
    "        'max_features': max_features,\n",
    "    }\n",
    "\n",
    "    # hyperparameter 탐색 결과를 리스트에 저장합니다.\n",
    "    fine_hyperparameters_list.append(hyperparameters)\n",
    "\n",
    "    # hyperparameter 탐색 결과를 출력합니다.\n",
    "    print(f\"{epoch:2} n_estimators = {n_estimators}, max_depth = {max_depth:2}, max_features = {max_features:.6f}, Score = {score:.5f}\")\n",
    "\n",
    "# fine_hyperparameters_list를 Pandas의 DataFrame으로 변환합니다.\n",
    "fine_hyperparameters_list = pd.DataFrame.from_dict(fine_hyperparameters_list)\n",
    "\n",
    "# 변환한 fine_hyperparameters_list를 score가 낮은 순으로 정렬합니다.\n",
    "# (RMSE는 score가 낮을 수록 더 정확도가 높다고 가정합니다)\n",
    "fine_hyperparameters_list = fine_hyperparameters_list.sort_values(by=\"score\")\n",
    "\n",
    "# fine_hyperparameters_list 변수에 할당된 데이터의 행렬 사이즈를 출력합니다.\n",
    "# 출력은 (row, column) 으로 표시됩니다.\n",
    "print(fine_hyperparameters_list.shape)\n",
    "\n",
    "# fine_hyperparameters_list의 상위 10개를 출력합니다.\n",
    "fine_hyperparameters_list.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "탐색 결과 다음의 하이퍼패러미터가 가장 좋은 하이퍼패러미터라는 사실을 발견할 수 있습니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max_depth(best) = 97.0, max_features(best) = 0.897703\n"
     ]
    }
   ],
   "source": [
    "# 가장 score가 낮게 나온(=좋은 정확도가 나온) 하이퍼패러미터를 가져옵니다.\n",
    "# 이를 best_hyperparameters라는 이름의 변수에 저장합니다.\n",
    "best_hyperparameters = fine_hyperparameters_list.iloc[0]\n",
    "\n",
    "# best_hyperparameters에서 max_depth 하이퍼패러미터만 가져옵니다.\n",
    "# 이를 best_max_depth라는 이름의 변수에 저장합니다.\n",
    "best_max_depth = best_hyperparameters[\"max_depth\"]\n",
    "\n",
    "# best_hyperparameters에서 max_features 하이퍼패러미터만 가져옵니다.\n",
    "# 이를 best_max_features라는 이름의 변수에 저장합니다.\n",
    "best_max_features = best_hyperparameters[\"max_features\"]\n",
    "\n",
    "# best_max_depth와 best_max_features를 출력합니다.\n",
    "print(f\"max_depth(best) = {best_max_depth}, max_features(best) = {best_max_features:.6f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Predict\n",
    "\n",
    "좋은 하이퍼패러미터를 찾았으면, 이제 이 하이퍼패러미터를 활용해 머신러닝 모델을 학습할 시간입니다.\n",
    "\n",
    "scikit-learn에 있는 머신러닝 알고리즘에는 크게 두 가지 기능이 있습니다.\n",
    "\n",
    "  * **fit**: 머신러닝 알고리즘을 학습시킵니다. 학습이라는 건 쉽게 말해 \"머신러닝 알고리즘이 스스로 데이터에서 패턴을 찾는 행위\"를 학습한다고 하며, 전문용어로 traning 내지는 fitting한다고 하기 때문에 fit이라는 표현을 사용합니다. fit을 하기 위해서는 train 데이터가 필요하며, 정확히는 train 데이터의 feature(X_train)와 label(y_train)이 필요합니다.\n",
    "  * **predict**: **fit**이 끝나면, 이후에 **predict**를 통해 예측을 할 수 있습니다. predict를 하기 위해서는 test 데이터가 필요하며, 정확히는 test 데이터의 feature(X_test)가 필요합니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=97,\n",
       "                      max_features=0.897703, max_leaf_nodes=None,\n",
       "                      min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                      min_samples_leaf=1, min_samples_split=2,\n",
       "                      min_weight_fraction_leaf=0.0, n_estimators=3000,\n",
       "                      n_jobs=-1, oob_score=False, random_state=37, verbose=0,\n",
       "                      warm_start=False)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# scikit-learn 패키지의 ensemble 모듈에 있는 RandomForestRegressor를 가지고 옵니다.\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "# 하이퍼패러미터 튜닝이 끝났으면, 이제 n_estimators를 가능한 높은 값을 주겠습니다.\n",
    "best_n_estimators = 3000\n",
    "\n",
    "# 주의: 혹시 하이퍼패러미터 튜닝을 하는데 시간이 너무 오래 걸린다면,\n",
    "# 이를 대신해서 다음의 하이퍼패러미터를 사용해주세요. (아래 두 줄의 주석을 풀면 됩니다)\n",
    "best_max_depth = 97\n",
    "best_max_features = 0.897703\n",
    "        \n",
    "# RandomForestRegressor를 생성합니다. 실행할 때는 다음의 옵션이 들어갑니다.\n",
    "# 1) n_estimators. 트리의 갯수입니다. 지정한 갯수만큼 트리를 생성합니다.\n",
    "# 2) max_depth. 트리의 깊이입니다. 지정한 숫자만큼 트리가 깊게 가지를 뻗습니다.\n",
    "# 3) max_features. Feature Sampling입니다. 0.0 ~ 1.0 사이의 값을 넣으면, 트리를 생성할 때 전체 feature에서 지정한 비율만큼만 feature를 사용합니다.\n",
    "# 4) n_jobs. 병렬처리 여부입니다. -1을 대입하면 컴퓨터에 존재하는 모든 코어(Core, ex: 듀얼코어, 쿼드코어)를 전부 활용합니다.\n",
    "# 5) random_state. 랜덤포레스트의 결과가 랜덤하게 나오는 것을 고정하는 옵션입니다. 아무 숫자나 넣어주면 됩니다. (공학 용어에서 쓰이는 Seed Number와 동일한 개념입니다)\n",
    "model = RandomForestRegressor(n_estimators = best_n_estimators,\n",
    "                              max_depth = best_max_depth,\n",
    "                              max_features = best_max_features,\n",
    "                              random_state = 37,\n",
    "                              n_jobs = -1)\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(6493,)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([ 11.82055122,   4.73556256,   2.86008745, ..., 100.92382017,\n",
       "        96.77208793,  46.12497261])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 머신러닝 모델을 학습하되, log + 1 연산을 한 비회원의 자전거 대여량(casual)을 label로 지정합니다.\n",
    "model.fit(X_train, y_train_log_casual)\n",
    "\n",
    "# 이 모델로 test 데이터의 log + 1 연산을 한 비회원의 자전거 대여량(casual)을 예측합니다.\n",
    "log_casual_predictions = model.predict(X_test)\n",
    "\n",
    "# 머신러닝 모델을 학습하되, log + 1 연산을 한 회원의 자전거 대여량(registered)을 label로 지정합니다.\n",
    "model.fit(X_train, y_train_log_registered)\n",
    "\n",
    "# 이 모델로 test 데이터의 log + 1 연산을 한 회원의 자전거 대여량(registered)을 예측합니다.\n",
    "log_registered_predictions = model.predict(X_test)\n",
    "\n",
    "# 머신러닝 모델을 학습하되, log + 1 연산을 한 자전거 대여량(count)을 label로 지정합니다.\n",
    "model.fit(X_train, y_train_log_count)\n",
    "\n",
    "# 이 모델로 test 데이터의 log + 1 연산을 한 자전거 대여량(count)을 예측합니다.\n",
    "log_count_predictions = model.predict(X_test)\n",
    "\n",
    "# 세 개의 예측값에 전부 exp - 1 연산을 해서\n",
    "# 원래 자전거 대여량으로 변환합니다.\n",
    "casual_predictions = np.exp(log_casual_predictions) - 1\n",
    "registered_predictions = np.exp(log_registered_predictions) - 1\n",
    "count_predictions = np.exp(log_count_predictions) - 1\n",
    "\n",
    "# 이 자전거 대여량을 기하평균을 사용하여 하나로 합칩니다.\n",
    "# 그 결과를 predictions 이라는 값에 할당합니다.\n",
    "predictions = np.sqrt((casual_predictions + registered_predictions) * count_predictions)\n",
    "\n",
    "# predictions 변수에 할당된 데이터의 사이즈를 출력합니다.\n",
    "# 출력은 (row, column) 으로 표시되나, column이 없기 때문에 (row,) 형태로 표시될 것입니다.\n",
    "print(predictions.shape)\n",
    "\n",
    "# predictions 데이터 띄웁니다.\n",
    "predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Submit\n",
    "\n",
    "머신러닝 알고리즘을 활용해서 우리는 test 데이터에 있는 자전거 대여량(count)을 예측하였습니다. 이제 우리에게 남은 건 이를 캐글([kaggle](http://kaggle.com/))이 권장하는 제출(submission) 포멧에 맞게 정리한 뒤 파일로 저장하는 것입니다.\n",
    "\n",
    "캐글의 [Bike Sharing Demand](https://www.kaggle.com/c/bike-sharing-demand) 경진대회에서는 **sampleSubmission.csv**라는 제출 포멧을 제공합니다. ([다운로드 링크](https://www.kaggle.com/c/bike-sharing-demand/data)) 우리는 우리가 예측한 값을 이 제출 포멧에 맞게 집어넣고 저장할 것입니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(6493, 2)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>datetime</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-01-20 00:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011-01-20 01:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-01-20 02:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-01-20 03:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-01-20 04:00:00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              datetime  count\n",
       "0  2011-01-20 00:00:00      0\n",
       "1  2011-01-20 01:00:00      0\n",
       "2  2011-01-20 02:00:00      0\n",
       "3  2011-01-20 03:00:00      0\n",
       "4  2011-01-20 04:00:00      0"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 캐글이 제공하는 제출 포멧(sampleSubmission.csv)을 읽어옵니다.\n",
    "# 이를 submission 이라는 이름의 변수에 할당합니다.\n",
    "submission = pd.read_csv(\"C:\\\\Users\\\\user\\\\Desktop\\\\Python\\\\DS_school\\\\8_week\\\\1. data\\\\sampleSubmission.csv\")\n",
    "\n",
    "# submission 변수에 할당된 데이터의 행렬 사이즈를 출력합니다.\n",
    "# 출력은 (row, column) 으로 표시됩니다.\n",
    "print(submission.shape)\n",
    "\n",
    "# submission 데이터의 상위 5개를 띄웁니다.\n",
    "submission.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(6493, 2)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>datetime</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2011-01-20 00:00:00</td>\n",
       "      <td>11.820551</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2011-01-20 01:00:00</td>\n",
       "      <td>4.735563</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2011-01-20 02:00:00</td>\n",
       "      <td>2.860087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2011-01-20 03:00:00</td>\n",
       "      <td>3.077910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2011-01-20 04:00:00</td>\n",
       "      <td>2.411211</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              datetime      count\n",
       "0  2011-01-20 00:00:00  11.820551\n",
       "1  2011-01-20 01:00:00   4.735563\n",
       "2  2011-01-20 02:00:00   2.860087\n",
       "3  2011-01-20 03:00:00   3.077910\n",
       "4  2011-01-20 04:00:00   2.411211"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 제출 포멧(submission)의 자전거 대여량(count) 컬럼에 우리의 예측값(predictions)를 집어넣습니다.\n",
    "# 두 데이터 모두 길이가 6493개로 동일하기 때문에, 등호(=)를 통해 쉽게 예측값을 넣을 수 있습니다.\n",
    "submission[\"count\"] = predictions\n",
    "\n",
    "# submission 변수에 할당된 데이터의 행렬 사이즈를 출력합니다.\n",
    "# 출력은 (row, column) 으로 표시됩니다.\n",
    "print(submission.shape)\n",
    "\n",
    "# submission 데이터의 상위 5개를 띄웁니다.\n",
    "submission.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 마지막으로 submission 변수에 들어간 값을 csv 형식의 데이터로 저장합니다.\n",
    "submission.to_csv(\"C:\\\\Users\\\\user\\\\Desktop\\\\Python\\\\DS_school\\\\8_week\\\\3. assignment\\\\222.csv\", index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 마무리\n",
    "\n",
    "이로서 이번 수업의 목표인 [bike sharing demand](https://www.kaggle.com/c/bike-sharing-demand) 경진대회의 최상위권 (134/3251등, 상위 4.12%)에 도달하는 방법을 배웠습니다. 캐글은 공신력있는 데이터 사이언스 경진대회인데, 상위 5% 안에 들었다면 현업에서 일 하는 데이터 사이언티스트 중에서도 굉장히 잘 하는 축에 속한다고 볼 수 있습니다. (보통 시니어 데이터 사이언티스트의 기준을 상위 5%로 잡곤 합니다. ([링크 참고](https://www.kaggle.com/progression)))\n",
    "\n",
    "하지만 여기에 담겨진 내용 외에도 추가로 시도할 굉장히 많은 아이디어들이 있습니다. 몇 가지 예를 들자면\n",
    "\n",
    "몇몇 힌트를 드리자면\n",
    "\n",
    "  * 이전 수업에서 탐험적 데이터 분석(EDA)으로 분석한 결과를 바탕으로 feature를 새롭게 추가하거나, 고치거나, 아니면 제거할 수도 있습니다. 가령 앞서 분석한 결과를 바탕으로 온도와 체감온도의 차이(```temp(difference)```)를 새로운 feature로 추가하는 것도 가능합니다.\n",
    "  * 이미 존재하는 컬럼의 값을 수정해서 적용하는 것도 가능합니다. 계절(```season```)이나 날씨(```weather```)를 One Hot Encoding해서 머신러닝 모델에 넣는다던가, 풍속(```windspeeed```)의 빈 값을 모종의 제대로된 값으로 채워서 머신러닝 알고리즘에 넣는 것도 방법입니다.\n",
    "  * 아니면 아예 다른 관점에서 머신러닝 모델의 성능을 개선할 수 있습니다. 가령 우리가 사용한 머신러닝 알고리즘([RandomForestRegressor](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html)의 여러 옵션들을 살펴본 뒤 이를 고치는 것도 방법이고, 아예 새로운 머신러닝 알고리즘을 적용하는 것도 좋은 아이디어입니다. (새로운 머신러닝 알고리즘에 관심이 있는 분들은, [Gradient Boosting](https://medium.com/mlreview/gradient-boosting-from-scratch-1e317ae4587d) 또는 [XGBoost](https://xgboost.readthedocs.io/en/latest/)나 [LightGBM](https://lightgbm.readthedocs.io/en/latest/)을 살펴보세요.\n",
    "  \n",
    "위의 힌트, 또는 본인이 생각하기에 중요하다고 생각되는 부분을 머신러닝 알고리즘에 적용해서 개선해보세요. 주어진 형식에 구애받지 않고 자유롭게 데이터와 모델을 고쳐나가면 됩니다. 하지만 모델을 개선하는 과정에서 몇몇 도움이 되는 노하우를 공유하자면\n",
    "\n",
    "  * 앞서 과제와 마찬가지로, 지금 상황에서 중요한건 창의성보다는 검색과 벤치마킹입니다. 유사 솔루션, 경진대회, 데이터셋을 벤치마킹하는 실력도 매우 중요합니다. 캐글에서는 보통 [Kernel](https://www.kaggle.com/c/bike-sharing-demand/kernels) 탭에서 사람들이 본인들만의 분석 결과와 솔루션을 올리고, [Discussion](https://www.kaggle.com/c/bike-sharing-demand/discussion) 탭에서 경진대회에 대한 토론을 합니다. 이 탭을 집중적으로 살펴보고 벤치마킹 해주세요. 심지어 [이런](https://www.kaggle.com/viveksrinivasan/eda-ensemble-model-top-10-percentile/notebook) 페이지에는 경진대회 상위 10%에 도달하는 노하우가 그대로 공유되어 있습니다. 이 노하우만 잘 이해해도 충분합니다.\n",
    "  * 그리고 비슷하게, [Bike Sharing Demand](https://www.kaggle.com/c/bike-sharing-demand) 경진대회의 다양한 솔루션들을 구글에서 찾을 수도 있습니다. [다음의 링크](https://www.analyticsvidhya.com/blog/2015/06/solution-kaggle-competition-bike-sharing-demand/)나 [다음의 링크](https://medium.com/@viveksrinivasan/how-to-finish-top-10-percentile-in-bike-sharing-demand-competition-in-kaggle-part-1-c816ea9c51e1)처럼 이 경진대회에 대해 자세히 분석하고 솔루션을 제시하는 곳도 있습니다. 이런 솔루션을 구글에서 찾아서 적극적으로 벤치마킹 해주세요.\n",
    "  * 마지막으로, 데이터는 많이 분석하면 분석할수록 노하우가 쌓입니다. 그리고 캐글 경진대회도 많이 참여할수록 점점 노하우가 쌓이게 됩니다. 그런 의미에서, 이전에 참여한 경진대회에서 먹혔던 분석 노하우가 전략을 적극적으로 활용해보세요. 가령 [Titanic](https://www.kaggle.com/c/titanic) 경진대회에서 먹혔던 전략을 그대로 활용하는 것도 가능합니다.\n",
    "  \n",
    "만일 이 쥬피터 노트북에서 달성한 점수(RMSLE 기준 0.38474)보다 더 좋은 점수를 달성했다면, 구현한 쥬피터 노트북을 datascience@dsschool.co.kr로 제출해주시면 수업 외적으로도 피드백을 해드립니다.\n",
    "\n",
    "쥬피터 노트북 파일은 좌상단의 File -> Download as -> Notebook(.ipynb)를 클릭하면 다운받을 수 있습니다. 더 궁금한 사항이 있으면 언제나 채팅방 또는 datascience@dsschool.co.kr로 문의 바랍니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
